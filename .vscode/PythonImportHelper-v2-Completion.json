[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "importPath": "distutils.util",
        "description": "distutils.util",
        "isExtraImport": true,
        "detail": "distutils.util",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_ENDPOINT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_STARTING_PORT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "EVALUATOR_HEADLESS",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_CONTEXT_WINDOW",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROME_PATH",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROMEDRIVER_PATH",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "ANALYSIS_COLLECTION",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "GENERATE_MILESTONES",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_PROVIDER",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_MODEL_ENDPOINT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_PARALLEL_MODEL_ENDPOINT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_NAME",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_URL",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MAX_TOKENS",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MODEL",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_TEMPERATURE",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "TASKS_COLLECTION",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_HOST",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_NAME",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_PORT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "LocalTestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "LocalTestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "LocalTestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "LocalTestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "LocalTestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "UseCase",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "UseCase",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "UseCase",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "UseCase",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "demo_web_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "demo_web_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "test_demo_web_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "_load_web_analysis",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "_load_web_analysis",
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationStats",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationStats",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "TimingMetrics",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "documentation": {}
    },
    {
        "label": "TimingMetrics",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "documentation": {}
    },
    {
        "label": "TimingMetrics",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "documentation": {}
    },
    {
        "label": "TimingMetrics",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "documentation": {}
    },
    {
        "label": "plot_results",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_task_comparison",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "save_results_to_json",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_results",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_task_comparison",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "save_results_to_json",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_results",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_task_comparison",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "save_results_to_json",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "ConsolidatedSolutionCache",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "ConsolidatedSolutionCache",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "ConsolidatedSolutionCache",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "ConsolidatedSolutionCache",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "generate_tasks_for_project",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "generate_tasks_for_project",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "generate_tasks_for_project",
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "SubnetVisualizer",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_evaluation",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_task",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "SubnetVisualizer",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_evaluation",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_task",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "TaskData",
        "importPath": "autoppia_iwa.src.shared.web_voyager_utils",
        "description": "autoppia_iwa.src.shared.web_voyager_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_voyager_utils",
        "documentation": {}
    },
    {
        "label": "load_real_tasks",
        "importPath": "autoppia_iwa.src.shared.web_voyager_utils",
        "description": "autoppia_iwa.src.shared.web_voyager_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_voyager_utils",
        "documentation": {}
    },
    {
        "label": "TaskData",
        "importPath": "autoppia_iwa.src.shared.web_voyager_utils",
        "description": "autoppia_iwa.src.shared.web_voyager_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_voyager_utils",
        "documentation": {}
    },
    {
        "label": "load_real_tasks",
        "importPath": "autoppia_iwa.src.shared.web_voyager_utils",
        "description": "autoppia_iwa.src.shared.web_voyager_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_voyager_utils",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "IWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "RootModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "RootModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "AnyUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "RootModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "CheckEventTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckEventTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckUrlTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "FindInHtmlTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnHTML",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnScreenshot",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckEventTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckUrlTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "FindInHtmlTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnHTML",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnScreenshot",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnScreenshot",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "LLMConfig",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "LLMConfig",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "transform_image_into_base64",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "extract_json_in_markdown",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "transform_image_into_base64",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "get_html_and_screenshot",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "detect_interactive_elements",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "detect_interactive_elements",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "get_html_and_screenshot",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "async_extract_html",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "PHASE1_GENERATION_SYSTEM_PROMPT",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "GlobalTaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.global_task_generation",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.global_task_generation",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.global_task_generation",
        "documentation": {}
    },
    {
        "label": "GlobalTestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "LocalTaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "documentation": {}
    },
    {
        "label": "LocalTaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "autoppia_iwa.src.demo_webs.projects.base_events",
        "description": "autoppia_iwa.src.demo_webs.projects.base_events",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.projects.base_events",
        "documentation": {}
    },
    {
        "label": "ComparisonOperator",
        "importPath": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "description": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "documentation": {}
    },
    {
        "label": "CriterionValue",
        "importPath": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "description": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "documentation": {}
    },
    {
        "label": "validate_criterion",
        "importPath": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "description": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "SinglePageAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "LLMWebAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "aiohttp.client_exceptions",
        "description": "aiohttp.client_exceptions",
        "isExtraImport": true,
        "detail": "aiohttp.client_exceptions",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "importPath": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "description": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "importPath": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "description": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "importPath": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "description": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "documentation": {}
    },
    {
        "label": "display_batch_evaluation_summary",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "display_single_evaluation_summary",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "generate_feedback",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "get_random_clicker_performance",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "hash_actions",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "initialize_test_results_matrix",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "log_progress",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "run_tests",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "IEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.interfaces",
        "description": "autoppia_iwa.src.evaluation.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.interfaces",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseActionWithSelector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "PlaywrightBrowserExecutor",
        "importPath": "autoppia_iwa.src.execution.browser_executor",
        "description": "autoppia_iwa.src.execution.browser_executor",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.browser_executor",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "FeedbackGenerator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "description": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "documentation": {}
    },
    {
        "label": "TestRunner",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "description": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "tiktoken",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tiktoken",
        "description": "tiktoken",
        "detail": "tiktoken",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncOpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "AsyncOpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "box",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "Align",
        "importPath": "rich.align",
        "description": "rich.align",
        "isExtraImport": true,
        "detail": "rich.align",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "rich.text",
        "description": "rich.text",
        "isExtraImport": true,
        "detail": "rich.text",
        "documentation": {}
    },
    {
        "label": "UIParserService",
        "importPath": "autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "description": "autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "WebCrawler",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "description": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "documentation": {}
    },
    {
        "label": "WebCrawler",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "description": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "documentation": {}
    },
    {
        "label": "WebLLMAnalyzer",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "description": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "documentation": {}
    },
    {
        "label": "WebPageStructureExtractor",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "description": "autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "PromptLLMTemplate",
        "importPath": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "description": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "documentation": {}
    },
    {
        "label": "OpenAIUtilsMixin",
        "importPath": "autoppia_iwa.src.llms.domain.utils",
        "description": "autoppia_iwa.src.llms.domain.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.utils",
        "documentation": {}
    },
    {
        "label": "containers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "providers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "containers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "providers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "LLMConfig",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "LLMFactory",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "Blip2ForConditionalGeneration",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "Blip2Processor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModelForCausalLM",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModelForCausalLM",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "repair_json",
        "importPath": "json_repair",
        "description": "json_repair",
        "isExtraImport": true,
        "detail": "json_repair",
        "documentation": {}
    },
    {
        "label": "repair_json",
        "importPath": "json_repair",
        "description": "json_repair",
        "isExtraImport": true,
        "detail": "json_repair",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "Movie",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "Genre",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "Genre",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "Movie",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "Movie",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "Genre",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "Movie",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "ContactMessage",
        "importPath": "movieapp.models",
        "description": "movieapp.models",
        "isExtraImport": true,
        "detail": "movieapp.models",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "importPath": "modules.webs_demo.web_1_demo_movies.admin.views",
        "description": "modules.webs_demo.web_1_demo_movies.admin.views",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_movies.admin.views",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "require_POST",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "events.models",
        "description": "events.models",
        "isExtraImport": true,
        "detail": "events.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "events.models",
        "description": "events.models",
        "isExtraImport": true,
        "detail": "events.models",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestDIContainer",
        "importPath": "tests.test_di_container",
        "description": "tests.test_di_container",
        "isExtraImport": true,
        "detail": "tests.test_di_container",
        "documentation": {}
    },
    {
        "label": "TestDIContainer",
        "importPath": "tests.test_di_container",
        "description": "tests.test_di_container",
        "isExtraImport": true,
        "detail": "tests.test_di_container",
        "documentation": {}
    },
    {
        "label": "LLM_PROVIDER",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "LLM_PROVIDER = os.getenv(\"LLM_PROVIDER\", \"local\")  # Can be \"serverless\", \"local\", or \"openai\"\nLLM_THRESHOLD = 100\nLLM_CONTEXT_WINDOW = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 10000))\nLOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\nLOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_THRESHOLD",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "LLM_THRESHOLD = 100\nLLM_CONTEXT_WINDOW = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 10000))\nLOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\nLOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_CONTEXT_WINDOW",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "LLM_CONTEXT_WINDOW = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 10000))\nLOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\nLOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_MODEL_ENDPOINT",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "LOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\nLOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_PARALLEL_MODEL_ENDPOINT",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "LOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MODEL",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================\nMONGODB_URL = os.getenv(\"MONGODB_URL\")",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MAX_TOKENS",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================\nMONGODB_URL = os.getenv(\"MONGODB_URL\")\nMONGODB_NAME = \"workflow\"",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_TEMPERATURE",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================\nMONGODB_URL = os.getenv(\"MONGODB_URL\")\nMONGODB_NAME = \"workflow\"\nANALYSIS_COLLECTION = \"web_analysis\"",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "MONGODB_URL = os.getenv(\"MONGODB_URL\")\nMONGODB_NAME = \"workflow\"\nANALYSIS_COLLECTION = \"web_analysis\"\nTASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "MONGODB_NAME = \"workflow\"\nANALYSIS_COLLECTION = \"web_analysis\"\nTASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "ANALYSIS_COLLECTION",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "ANALYSIS_COLLECTION = \"web_analysis\"\nTASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "TASKS_COLLECTION",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "TASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DOCUMENTS_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "DOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROMEDRIVER_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "CHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nEVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROME_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "CHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nEVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration\n# ============================",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "PROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nEVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"False\")))",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "PROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nEVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"False\")))\n# ============================",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "EVALUATOR_HEADLESS",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "EVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"False\")))\n# ============================\n# Project Base Directory Path\n# ============================\nPROJECT_BASE_DIR = Path(__file__).resolve().parents[1]\n# ============================",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "GENERATE_MILESTONES",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "GENERATE_MILESTONES = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"False\")))\n# ============================\n# Project Base Directory Path\n# ============================\nPROJECT_BASE_DIR = Path(__file__).resolve().parents[1]\n# ============================\n# DEMO WEBS\n# ============================\nDEMO_WEBS_ENDPOINT = os.getenv(\"DEMO_WEBS_ENDPOINT\", \"http://localhost\")\nDEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "PROJECT_BASE_DIR = Path(__file__).resolve().parents[1]\n# ============================\n# DEMO WEBS\n# ============================\nDEMO_WEBS_ENDPOINT = os.getenv(\"DEMO_WEBS_ENDPOINT\", \"http://localhost\")\nDEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))\n# ============================\n# Agent Configurations\n# ============================\nAGENT_NAME = os.getenv(\"AGENT_NAME\")",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_ENDPOINT",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "DEMO_WEBS_ENDPOINT = os.getenv(\"DEMO_WEBS_ENDPOINT\", \"http://localhost\")\nDEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))\n# ============================\n# Agent Configurations\n# ============================\nAGENT_NAME = os.getenv(\"AGENT_NAME\")\nUSE_APIFIED_AGENT = bool(strtobool(os.getenv(\"USE_APIFIED_AGENT\", \"false\")))\nAGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_STARTING_PORT",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "DEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))\n# ============================\n# Agent Configurations\n# ============================\nAGENT_NAME = os.getenv(\"AGENT_NAME\")\nUSE_APIFIED_AGENT = bool(strtobool(os.getenv(\"USE_APIFIED_AGENT\", \"false\")))\nAGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "AGENT_NAME = os.getenv(\"AGENT_NAME\")\nUSE_APIFIED_AGENT = bool(strtobool(os.getenv(\"USE_APIFIED_AGENT\", \"false\")))\nAGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "USE_APIFIED_AGENT",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "USE_APIFIED_AGENT = bool(strtobool(os.getenv(\"USE_APIFIED_AGENT\", \"false\")))\nAGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_HOST",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "AGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_PORT",
        "kind": 5,
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "peekOfCode": "AGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "BenchmarkConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "class BenchmarkConfig:\n    \"\"\"Configuration for the benchmark test.\"\"\"\n    use_cached_tasks: bool = False\n    use_cached_solutions: bool = False\n    evaluate_real_tasks: bool = False\n    m: int = 1  # Number of copies of each solution to evaluate\n    prompts_per_url: int = 1\n    num_of_urls: int = 1\n    # Paths\n    base_dir: Path = PROJECT_BASE_DIR.parent",
        "detail": "autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "logger = logging.getLogger(\"benchmark\")\n@dataclass\nclass BenchmarkConfig:\n    \"\"\"Configuration for the benchmark test.\"\"\"\n    use_cached_tasks: bool = False\n    use_cached_solutions: bool = False\n    evaluate_real_tasks: bool = False\n    m: int = 1  # Number of copies of each solution to evaluate\n    prompts_per_url: int = 1\n    num_of_urls: int = 1",
        "detail": "autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "config = BenchmarkConfig()\nsolution_cache = ConsolidatedSolutionCache(str(config.solutions_cache_dir))\n# Define agents\nAGENTS: List[BaseAgent] = [\n    # RandomClickerWebAgent(name=\"Random-clicker\"),\n    ApifiedWebAgent(name=\"Browser-Use\", host=\"127.0.0.1\", port=5000, timeout=120),\n    # ApifiedWebAgent(name=\"Autoppia-Agent\", host=\"localhost\", port=9002, timeout=120),\n]\nvisualizer = SubnetVisualizer()\n@visualize_task(visualizer)",
        "detail": "autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "solution_cache",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "solution_cache = ConsolidatedSolutionCache(str(config.solutions_cache_dir))\n# Define agents\nAGENTS: List[BaseAgent] = [\n    # RandomClickerWebAgent(name=\"Random-clicker\"),\n    ApifiedWebAgent(name=\"Browser-Use\", host=\"127.0.0.1\", port=5000, timeout=120),\n    # ApifiedWebAgent(name=\"Autoppia-Agent\", host=\"localhost\", port=9002, timeout=120),\n]\nvisualizer = SubnetVisualizer()\n@visualize_task(visualizer)\nasync def generate_tasks(demo_project: WebProject, tasks_data: Optional[TaskData] = None) -> List[Task]:",
        "detail": "autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "visualizer",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "visualizer = SubnetVisualizer()\n@visualize_task(visualizer)\nasync def generate_tasks(demo_project: WebProject, tasks_data: Optional[TaskData] = None) -> List[Task]:\n    \"\"\"Generate tasks with caching support.\"\"\"\n    if config.evaluate_real_tasks and tasks_data:\n        task = Task(url=tasks_data.web, prompt=tasks_data.ques, is_web_real=True)\n        return await LocalTestGenerationPipeline(demo_project).add_tests_to_tasks([task])\n    return await generate_tasks_for_project(\n        demo_project,\n        config.use_cached_tasks,",
        "detail": "autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "compute_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "def compute_statistics(scores: List[float]) -> dict:\n    if scores:\n        return {\n            \"count\": len(scores),\n            \"mean\": statistics.mean(scores),\n            \"median\": statistics.median(scores),\n            \"min\": min(scores),\n            \"max\": max(scores),\n            \"stdev\": statistics.stdev(scores) if len(scores) > 1 else 0.0,\n        }",
        "detail": "autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "def print_performance_statistics(results, agents):\n    print(\"Agent Performance Metrics:\")\n    for agent in agents:\n        agent_stats = results[agent.id]\n        global_stats = compute_statistics(agent_stats[\"global_scores\"])\n        print(f\"\\nAgent: {agent.id}\")\n        print(\"  Global Stats:\")\n        for key, value in global_stats.items():\n            print(f\"    {key}: {value}\")\n        print(\"  Per Project Stats:\")",
        "detail": "autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "plot_agent_results",
        "kind": 2,
        "importPath": "autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "def plot_agent_results(results, agents):\n    agent_names = []\n    agent_avg_scores = []\n    for agent in agents:\n        scores = results[agent.id][\"global_scores\"]\n        avg_score = sum(scores) / len(scores) if scores else 0\n        agent_names.append(agent.name)\n        agent_avg_scores.append(avg_score)\n    plt.figure(figsize=(8, 6))\n    bars = plt.bar(agent_names, agent_avg_scores, color='skyblue')",
        "detail": "autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "judge_tasks_feasibility",
        "kind": 2,
        "importPath": "autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "def judge_tasks_feasibility(tasks, results, agents):\n    judge_input = \"Summary of generated tasks and results:\\n\\n\"\n    for idx, task in enumerate(tasks, start=1):\n        judge_input += f\"Task {idx}:\\n\"\n        judge_input += f\"  Prompt: {task.prompt}\\n\"\n        judge_input += f\"  URL: {task.url}\\n\"\n        if task.tests:\n            judge_input += \"  Tests:\\n\"\n            for test in task.tests:\n                judge_input += f\"    - {test.model_dump()}\\n\"",
        "detail": "autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "app = AppBootstrap()\nasync def generate_tasks(num_tasks: int = 3):\n    test_projects = test_demo_web_projects\n    test_projects = await initialize_demo_webs_projects(test_projects)\n    web_project = test_projects[0]\n    config = TaskGenerationConfig(\n        save_task_in_db=False,\n        save_web_analysis_in_db=True,\n        enable_crawl=True,\n        generate_milestones=False,",
        "detail": "autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "logger = logging.getLogger(\"stress_test\")\n# -----------------------------------------------------------------------------\n# Configuration for the stress test\n# -----------------------------------------------------------------------------\nUSE_CACHED_TASKS = False  # Set to True to use cached tasks from JSON file\nUSE_CACHED_SOLUTIONS = False  # Set to True to use cached solutions when available\nTASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "USE_CACHED_TASKS",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "USE_CACHED_TASKS = False  # Set to True to use cached tasks from JSON file\nUSE_CACHED_SOLUTIONS = False  # Set to True to use cached solutions when available\nTASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 2\nNUM_OF_URLS = 2\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "USE_CACHED_SOLUTIONS",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "USE_CACHED_SOLUTIONS = False  # Set to True to use cached solutions when available\nTASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 2\nNUM_OF_URLS = 2\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "TASKS_CACHE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "TASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 2\nNUM_OF_URLS = 2\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "SOLUTIONS_CACHE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "SOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 2\nNUM_OF_URLS = 2\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "OUTPUT_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "OUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 2\nNUM_OF_URLS = 2\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "M = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 2\nNUM_OF_URLS = 2\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "PROMPTS_PER_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "PROMPTS_PER_URL = 2\nNUM_OF_URLS = 2\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------\n# Define the agents for the stress test",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "NUM_OF_URLS",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "NUM_OF_URLS = 2\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------\n# Define the agents for the stress test\n# -----------------------------------------------------------------------------",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "solution_cache",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "solution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------\n# Define the agents for the stress test\n# -----------------------------------------------------------------------------\nAGENTS: List[BaseAgent] = [RandomClickerWebAgent(name=\"Random-clicker\"), ApifiedWebAgent(name=\"browser-use\", host=\"localhost\", port=9000)]\n# Identifier for the browser-use agent\nBROWSER_USE_AGENT_ID = \"ApifiedWebAgent-browser-use\"\nasync def main():\n    \"\"\"Main function to run the multi-task agent evaluation (stress test).\"\"\"\n    logger.info(\"Starting comprehensive multi-task agent evaluation with batch processing...\")",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "BROWSER_USE_AGENT_ID",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa.entrypoints.stress",
        "peekOfCode": "BROWSER_USE_AGENT_ID = \"ApifiedWebAgent-browser-use\"\nasync def main():\n    \"\"\"Main function to run the multi-task agent evaluation (stress test).\"\"\"\n    logger.info(\"Starting comprehensive multi-task agent evaluation with batch processing...\")\n    # Initialize the application\n    AppBootstrap()\n    # Initialize timing metrics\n    timing_metrics = TimingMetrics()\n    timing_metrics.start()\n    # Container to store results: { agent_id: { task_id: {\"score\": ...} } }",
        "detail": "autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "logger = logging.getLogger(\"stress_test\")\n# -----------------------------------------------------------------------------\n# Configuration for the stress test\n# -----------------------------------------------------------------------------\nUSE_CACHED_TASKS = False  # Set to True to use cached tasks from JSON file\nUSE_CACHED_SOLUTIONS = False  # Set to True to use cached solutions when available\nTASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "USE_CACHED_TASKS",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "USE_CACHED_TASKS = False  # Set to True to use cached tasks from JSON file\nUSE_CACHED_SOLUTIONS = False  # Set to True to use cached solutions when available\nTASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 15\nNUM_OF_URLS = 10\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "USE_CACHED_SOLUTIONS",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "USE_CACHED_SOLUTIONS = False  # Set to True to use cached solutions when available\nTASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 15\nNUM_OF_URLS = 10\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "TASKS_CACHE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "TASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 15\nNUM_OF_URLS = 10\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "SOLUTIONS_CACHE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "SOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 15\nNUM_OF_URLS = 10\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "OUTPUT_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "OUTPUT_DIR = \"results\"  # Directory to store test results\nM = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 15\nNUM_OF_URLS = 10\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "M = 1  # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 15\nNUM_OF_URLS = 10\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "PROMPTS_PER_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "PROMPTS_PER_URL = 15\nNUM_OF_URLS = 10\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------\n# Define the agents for the stress test",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "NUM_OF_URLS",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "NUM_OF_URLS = 10\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------\n# Define the agents for the stress test\n# -----------------------------------------------------------------------------",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "solution_cache",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "solution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------\n# Define the agents for the stress test\n# -----------------------------------------------------------------------------\nAGENTS: List[BaseAgent] = [RandomClickerWebAgent(name=\"Random-clicker\"), ApifiedWebAgent(name=\"browser-use\", host=\"localhost\", port=9000)]\n# Identifier for the browser-use agent\nBROWSER_USE_AGENT_ID = \"ApifiedWebAgent-browser-use\"\nasync def main():\n    \"\"\"Main function to run the multi-task agent evaluation (stress test).\"\"\"\n    logger.info(\"Starting comprehensive multi-task agent evaluation with batch processing...\")",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "BROWSER_USE_AGENT_ID",
        "kind": 5,
        "importPath": "autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "BROWSER_USE_AGENT_ID = \"ApifiedWebAgent-browser-use\"\nasync def main():\n    \"\"\"Main function to run the multi-task agent evaluation (stress test).\"\"\"\n    logger.info(\"Starting comprehensive multi-task agent evaluation with batch processing...\")\n    # Initialize the application\n    AppBootstrap()\n    # Initialize timing metrics\n    timing_metrics = TimingMetrics()\n    timing_metrics.start()\n    # Container to store results: { agent_id: { task_id: {\"score\": ...} } }",
        "detail": "autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "CHECK_EVENT_TEST_GENERATION_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.prompts",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.prompts",
        "peekOfCode": "CHECK_EVENT_TEST_GENERATION_PROMPT = \"\"\"\nYou are an AI assistant designed to generate tests that validate whether a Web Agent has successfully completed a given task. \n## Objective:\nYou will receive a **Task Prompt** and must generate a list of `CheckEventTest` objects that validate its completion. These tests will be executed automatically to determine if the agent has performed the required actions.\n## Context:\n- The task was generated by an LLM based on a specific **use case**. You will receive details about this use case to guide your test generation.\n- Avoid generating redundant tests that validate the same aspect.\n- Some tasks include specific requirements; you must analyze and extract them to populate the `\"event_criteria\"` field accurately.\n---\n### Provided Information:",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.prompts",
        "documentation": {}
    },
    {
        "label": "TestEvaluationResult",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.schemas",
        "peekOfCode": "class TestEvaluationResult(BaseModel):\n    \"\"\"\n    Model for LLM response when evaluating a specific test type for a task\n    \"\"\"\n    applicable: bool = Field(..., description=\"Whether this test type is applicable for the task\")\n    reason: str = Field(..., description=\"Explanation for why this test is or is not applicable\")\n    parameters: Dict[str, Any] = Field(default_factory=dict, description=\"If applicable=true, the parameters to use when creating the test instance\")",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.schemas",
        "documentation": {}
    },
    {
        "label": "GlobalTestGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.test_generation_pipeline",
        "peekOfCode": "class GlobalTestGenerationPipeline:\n    \"\"\"\n    Simplified pipeline that:\n      - Iterates over tasks with a defined UseCase\n      - Generates only CheckEventTest from the LLM\n      - Attaches them to the task\n    \"\"\"\n    def __init__(\n        self,\n        web_project: WebProject,",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "normalize_test_config",
        "kind": 2,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.utils",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.utils",
        "peekOfCode": "def normalize_test_config(test_config: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"\n    Converts LLM-produced test_config (with nested 'fields') into a flattened structure.\n    \"\"\"\n    # Get the original test type\n    raw_test_type = test_config.get(\"test_type\")\n    # Flatten the 'fields' dictionary into the main dictionary\n    if \"fields\" in test_config and isinstance(test_config[\"fields\"], dict):\n        fields = test_config.pop(\"fields\")\n        test_config.update(fields)",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.utils",
        "documentation": {}
    },
    {
        "label": "extract_domain",
        "kind": 2,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.utils",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.utils",
        "peekOfCode": "def extract_domain(url: str) -> str:\n    \"\"\"Extract domain from a full URL.\"\"\"\n    if not url:\n        return \"\"\n    pattern = re.compile(r\"https?://([^/]+)\")\n    match = pattern.match(url)\n    return match.group(1).lower() if match else \"\"",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.tests.utils",
        "documentation": {}
    },
    {
        "label": "GlobalTaskGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.global_task_generation",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.global_task_generation",
        "peekOfCode": "class GlobalTaskGenerationPipeline:\n    def __init__(\n        self,\n        web_project: WebProject,\n        llm_service: ILLM = Provide[DIContainer.llm_service],\n        max_retries: int = 3,\n        retry_delay: float = 0.1,\n    ):\n        self.web_project = web_project\n        self.llm_service = llm_service",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.global_task_generation",
        "documentation": {}
    },
    {
        "label": "GLOBAL_TASK_GENERATION_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.prompts",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.prompts",
        "peekOfCode": "GLOBAL_TASK_GENERATION_PROMPT = \"\"\"\nWe are creating synthetic prompts for a specific web project and we have manually created a list of Use Cases that represent this web project functionality.\nYou are going to receive information of this web project and a specific usecase \nand you are in charge or generating variants of prompts for that use case.\n## Use Case Information\n- Name: {use_case_name}\n- Description: {use_case_description}\n- Prompt Template: {prompt_template}\n##Examples:\n{prompt_examples}",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.prompts",
        "documentation": {}
    },
    {
        "label": "DraftTask",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "peekOfCode": "class DraftTask(BaseModel):\n    \"\"\"Schema for the output of Phase 1 draft tasks.\"\"\"\n    prompt: str\n    success_criteria: Optional[str] = None\nclass DraftTaskList(RootModel[List[DraftTask]]):\n    \"\"\"A container for a list of draft tasks.\"\"\"\n    # Access items via self.root (a List[DraftTask])\nclass FilterTask(BaseModel):\n    \"\"\"Schema for the output of Phase 2 filter tasks.\"\"\"\n    decision: str  # \"keep\" or \"discard\"",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "documentation": {}
    },
    {
        "label": "DraftTaskList",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "peekOfCode": "class DraftTaskList(RootModel[List[DraftTask]]):\n    \"\"\"A container for a list of draft tasks.\"\"\"\n    # Access items via self.root (a List[DraftTask])\nclass FilterTask(BaseModel):\n    \"\"\"Schema for the output of Phase 2 filter tasks.\"\"\"\n    decision: str  # \"keep\" or \"discard\"\n    prompt: str\n    success_criteria: Optional[str] = None\nclass FilterTaskList(RootModel[List[FilterTask]]):\n    \"\"\"A container for a list of filtered tasks.\"\"\"",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "documentation": {}
    },
    {
        "label": "FilterTask",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "peekOfCode": "class FilterTask(BaseModel):\n    \"\"\"Schema for the output of Phase 2 filter tasks.\"\"\"\n    decision: str  # \"keep\" or \"discard\"\n    prompt: str\n    success_criteria: Optional[str] = None\nclass FilterTaskList(RootModel[List[FilterTask]]):\n    \"\"\"A container for a list of filtered tasks.\"\"\"\n    # Access items via self.root (a List[FilterTask])",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "documentation": {}
    },
    {
        "label": "FilterTaskList",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "peekOfCode": "class FilterTaskList(RootModel[List[FilterTask]]):\n    \"\"\"A container for a list of filtered tasks.\"\"\"\n    # Access items via self.root (a List[FilterTask])",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.globals.schemas",
        "documentation": {}
    },
    {
        "label": "TestLogicGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.logic.logic_function_generator",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.logic.logic_function_generator",
        "peekOfCode": "class TestLogicGenerator:\n    \"\"\"\n    Generates executable logic expressions for test evaluation.\n    Uses a structured JSON format that can be directly translated to executable code.\n    \"\"\"\n    def __init__(self, llm_service: ILLM = Provide[DIContainer.llm_service]):\n        self.llm_service = llm_service\n    async def generate_logic(self, task: Task, tests: List[BaseTaskTest]) -> Dict[str, Any]:\n        \"\"\"\n        Generate a logic expression for the given task and tests.",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.logic.logic_function_generator",
        "documentation": {}
    },
    {
        "label": "LOGIC_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.logic.prompts",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.logic.prompts",
        "peekOfCode": "LOGIC_SYSTEM_PROMPT = \"\"\"\n    You are an expert at creating precise, executable logic expressions for test evaluation.\n    Given a matrix M where:\n    - Rows (i) represent steps/actions (1 to N)\n    - Columns (j) represent tests (1 to M)\n    - M[i][j] is True if test j passes at step i\n    Generate a logic expression in the following JSON format:\n    {\n        \"type\": \"operation\",\n        \"operator\": \"<operator>\",  # AND, OR, SEQUENCE, EXISTS, ALL",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.logic.prompts",
        "documentation": {}
    },
    {
        "label": "TEST_GENERATION_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.prompts",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.prompts",
        "peekOfCode": "TEST_GENERATION_PROMPT = \"\"\"\nYou are a specialized test engineer tasked with generating validation tests for our web agent benchmark framework. These tests will execute after each agent action, examining browser snapshots to determine if the agent has successfully completed the required task.\n## Task Information\n- Task Description: {task_prompt}\n- Success Requirements: {success_criteria}\n## Context\n- Current Page URL: {current_url}\n- Current Page HTML (truncated): {truncated_html}\n- Visual State Description: {screenshot_desc}\n- Available Interactive Elements: {interactive_elements}",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.prompts",
        "documentation": {}
    },
    {
        "label": "TestEvaluationResult",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.schemas",
        "peekOfCode": "class TestEvaluationResult(BaseModel):\n    \"\"\"\n    Model for LLM response when evaluating a specific test type for a task\n    \"\"\"\n    applicable: bool = Field(..., description=\"Whether this test type is applicable for the task\")\n    reason: str = Field(..., description=\"Explanation for why this test is or is not applicable\")\n    parameters: Dict[str, Any] = Field(default_factory=dict, description=\"If applicable=true, the parameters to use when creating the test instance\")",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.schemas",
        "documentation": {}
    },
    {
        "label": "LocalTestGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "peekOfCode": "class LocalTestGenerationPipeline:\n    \"\"\"A pipeline that:\n    1) Gathers context (HTML, screenshot info, etc.) for each Task.\n    2) Uses LLM to generate appropriate tests in a single call.\n    3) Instantiates the test objects and adds them to the task.\n    4) (Optionally) generates a logic function for the entire set of tests.\"\"\"\n    def __init__(\n        self,\n        web_project: WebProject,\n        llm_service: ILLM = Provide[DIContainer.llm_service],",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "normalize_test_config",
        "kind": 2,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.utils",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.utils",
        "peekOfCode": "def normalize_test_config(test_config: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"\n    Converts LLM-produced test_config (with nested 'fields') into a flattened structure.\n    \"\"\"\n    # Get the original test type\n    raw_test_type = test_config.get(\"test_type\")\n    # Flatten the 'fields' dictionary into the main dictionary\n    if \"fields\" in test_config and isinstance(test_config[\"fields\"], dict):\n        fields = test_config.pop(\"fields\")\n        test_config.update(fields)",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.utils",
        "documentation": {}
    },
    {
        "label": "extract_domain",
        "kind": 2,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.tests.utils",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.tests.utils",
        "peekOfCode": "def extract_domain(url: str) -> str:\n    \"\"\"Extract domain from a full URL.\"\"\"\n    if not url:\n        return \"\"\n    pattern = re.compile(r\"https?://([^/]+)\")\n    match = pattern.match(url)\n    return match.group(1).lower() if match else \"\"",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.tests.utils",
        "documentation": {}
    },
    {
        "label": "LocalTaskGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "peekOfCode": "class LocalTaskGenerationPipeline:\n    def __init__(self, web_project: WebProject, llm_service: \"ILLM\" = Provide[DIContainer.llm_service]):\n        self.web_project: WebProject = web_project\n        self.llm_service: ILLM = llm_service\n        self.max_retries: int = 3  # Maximum number of retries for LLM calls\n        self.retry_delay: float = 0.1  # Delay between retries in seconds\n    async def generate(self, number_of_prompts_per_url: int = 3, max_urls=5, random_urls=True):\n        \"\"\"Generate Local Tasks for a Web Project iterating all the urls\"\"\"\n        all_tasks = []\n        # Get the URLs to process based on parameters",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass LocalTaskGenerationPipeline:\n    def __init__(self, web_project: WebProject, llm_service: \"ILLM\" = Provide[DIContainer.llm_service]):\n        self.web_project: WebProject = web_project\n        self.llm_service: ILLM = llm_service\n        self.max_retries: int = 3  # Maximum number of retries for LLM calls\n        self.retry_delay: float = 0.1  # Delay between retries in seconds\n    async def generate(self, number_of_prompts_per_url: int = 3, max_urls=5, random_urls=True):\n        \"\"\"Generate Local Tasks for a Web Project iterating all the urls\"\"\"\n        all_tasks = []",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "documentation": {}
    },
    {
        "label": "PHASE1_GENERATION_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "peekOfCode": "PHASE1_GENERATION_SYSTEM_PROMPT = \"\"\"\nYou are a Task Example Generator that creates realistic examples of tasks a Web Agent could perform on websites.\nStart by identifying the type of task and the core use case that a user may want to do in this website. \nIdentify variations of that core use case. \nIf needed fill remaining task with simpler tasks like clicking, navigating, or using more structural items and elements. \nDIFFICULTY LEVEL: HARD (Create specially hard and not obvious tasks)\n**Input Provided**:\n- Website URL\n- Clean HTML snippet \n- Screenshot description (text-based UI representation)",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "documentation": {}
    },
    {
        "label": "DraftTask",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "peekOfCode": "class DraftTask(BaseModel):\n    \"\"\"Schema for the output of Phase 1 draft tasks.\"\"\"\n    prompt: str\n    success_criteria: Optional[str] = None\nclass DraftTaskList(RootModel[List[DraftTask]]):\n    \"\"\"A container for a list of draft tasks.\"\"\"\n    # Access items via self.root (a List[DraftTask])\nclass FilterTask(BaseModel):\n    \"\"\"Schema for the output of Phase 2 filter tasks.\"\"\"\n    decision: str  # \"keep\" or \"discard\"",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "documentation": {}
    },
    {
        "label": "DraftTaskList",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "peekOfCode": "class DraftTaskList(RootModel[List[DraftTask]]):\n    \"\"\"A container for a list of draft tasks.\"\"\"\n    # Access items via self.root (a List[DraftTask])\nclass FilterTask(BaseModel):\n    \"\"\"Schema for the output of Phase 2 filter tasks.\"\"\"\n    decision: str  # \"keep\" or \"discard\"\n    prompt: str\n    success_criteria: Optional[str] = None\nclass FilterTaskList(RootModel[List[FilterTask]]):\n    \"\"\"A container for a list of filtered tasks.\"\"\"",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "documentation": {}
    },
    {
        "label": "FilterTask",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "peekOfCode": "class FilterTask(BaseModel):\n    \"\"\"Schema for the output of Phase 2 filter tasks.\"\"\"\n    decision: str  # \"keep\" or \"discard\"\n    prompt: str\n    success_criteria: Optional[str] = None\nclass FilterTaskList(RootModel[List[FilterTask]]):\n    \"\"\"A container for a list of filtered tasks.\"\"\"\n    # Access items via self.root (a List[FilterTask])",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "documentation": {}
    },
    {
        "label": "FilterTaskList",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "peekOfCode": "class FilterTaskList(RootModel[List[FilterTask]]):\n    \"\"\"A container for a list of filtered tasks.\"\"\"\n    # Access items via self.root (a List[FilterTask])",
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "peekOfCode": "class TaskGenerationPipeline:\n    def __init__(\n        self,\n        web_project: WebProject,\n        config: TaskGenerationConfig,\n        synthetic_task_repository: BaseMongoRepository = Provide[DIContainer.synthetic_task_repository],\n        llm_service: ILLM = Provide[DIContainer.llm_service],\n    ):\n        self.web_project = web_project\n        self.task_config = config",
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class BrowserSpecification(BaseModel):\n    viewport_width: int = 1920\n    viewport_height: int = 1080\n    screen_width: int = 1920\n    screen_height: int = 1080\n    device_pixel_ratio: float = 1.0\n    scroll_x: int = 0\n    scroll_y: int = 0\n    browser_x: int = 0\n    browser_y: int = 0",
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class Task(BaseModel):\n    \"\"\"\n    Represents a task with associated metadata, specs, tests, etc.\n    \"\"\"\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()), description=\"Unique identifier for the task\")\n    scope: Literal[\"global\", \"local\"] = Field(default=\"local\", description=\"Task scope: 'global' for system-wide tasks, 'local' for specific context tasks\")\n    is_web_real: bool = Field(default=False, description=\"Indicates if the task operates on a real web environment versus simulation\")\n    web_project_id: Optional[str] = Field(default=None, description=\"Web project ID\")\n    url: str = Field(..., description=\"Target URL where the task will be executed\")\n    prompt: str = Field(..., description=\"Natural language description of the task objectives and requirements\")",
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class TaskGenerationConfig(BaseModel):\n    # Database saving options\n    save_task_in_db: bool = False\n    # URL handling\n    num_of_urls: int = 5  # Number of URLs to process\n    random_urls: bool = True  # Whether to randomly select URLs\n    # Task generation controls\n    generate_local_tasks: bool = False  # Generate page-specific tasks\n    generate_global_tasks: bool = True  # Generate global use case tasks\n    # Task quantity controls",
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TestUnion",
        "kind": 5,
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "TestUnion = Annotated[Union[CheckUrlTest, FindInHtmlTest, CheckEventTest, JudgeBaseOnHTML, JudgeBaseOnScreenshot], Field(discriminator=\"type\")]\nclass Task(BaseModel):\n    \"\"\"\n    Represents a task with associated metadata, specs, tests, etc.\n    \"\"\"\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()), description=\"Unique identifier for the task\")\n    scope: Literal[\"global\", \"local\"] = Field(default=\"local\", description=\"Task scope: 'global' for system-wide tasks, 'local' for specific context tasks\")\n    is_web_real: bool = Field(default=False, description=\"Indicates if the task operates on a real web environment versus simulation\")\n    web_project_id: Optional[str] = Field(default=None, description=\"Web project ID\")\n    url: str = Field(..., description=\"Target URL where the task will be executed\")",
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "SCREENSHOT_TEST_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa.src.data_generation.domain.prompts",
        "description": "autoppia_iwa.src.data_generation.domain.prompts",
        "peekOfCode": "SCREENSHOT_TEST_SYSTEM_PROMPT = \"\"\"You are an evaluator responsible for assessing the accuracy of web task executions. You will be provided with three key components:\n1. **Web Task Instruction** – A natural language directive detailing the required web activity (e.g., verifying information, checking availability, summarizing content, etc.).\n2. **Result Screenshots** – Visual evidence of the actions performed. These may not capture everything the agent sees.\n3. **Success Criteria** – The specific conditions that must be met for the task to be considered successful.\n### **Your Evaluation Guidelines**\n- ❌ **Do NOT** interact with web pages or take any actions (e.g., searching, booking).  \n- 🔍 **Do NOT** make assumptions beyond what is explicitly visible in the screenshot. If information is missing, rely on the provided response.  \n- ✅ Your role is to compare the instruction against the screenshot and response, verifying if the required actions were completed accurately.  \n### **Important Considerations**\n1. **Multi-Step Tasks**: If a task consists of multiple steps (e.g., locating a garage & summarizing reviews), failure to complete any step means the task is **NOT SUCCESSFUL**.  ",
        "detail": "autoppia_iwa.src.data_generation.domain.prompts",
        "documentation": {}
    },
    {
        "label": "OPINION_BASED_HTML_TEST_SYS_MSG",
        "kind": 5,
        "importPath": "autoppia_iwa.src.data_generation.domain.prompts",
        "description": "autoppia_iwa.src.data_generation.domain.prompts",
        "peekOfCode": "OPINION_BASED_HTML_TEST_SYS_MSG = \"\"\"You are a professional web page analyzer. Your task is to determine whether the given task was completed \nwith the action given, by analyzing the HTML before and after the action.\"\"\"",
        "detail": "autoppia_iwa.src.data_generation.domain.prompts",
        "documentation": {}
    },
    {
        "label": "ITest",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class ITest(ABC):\n    @abstractmethod\n    def _execute_test(self, current_iteration: int, prompt: str, snapshot: BrowserSnapshot, browser_snapshots: List[BrowserSnapshot]) -> bool:\n        \"\"\"\n        Abstract method to implement the specific logic for the test.\n        \"\"\"\nclass BaseTaskTest(BaseModel, ITest):\n    \"\"\"\n    Base class for all task tests.\n    \"\"\"",
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class BaseTaskTest(BaseModel, ITest):\n    \"\"\"\n    Base class for all task tests.\n    \"\"\"\n    class Config:\n        extra = \"allow\"\n        arbitrary_types_allowed = True\n    def execute_test(self, current_iteration: int, prompt: str, snapshot: BrowserSnapshot, browser_snapshots: List[BrowserSnapshot]) -> bool:\n        return self._execute_test(current_iteration, prompt, snapshot, browser_snapshots)\n    @abstractmethod",
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckUrlTest",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class CheckUrlTest(BaseTaskTest):\n    \"\"\"\n    Test that checks if the browser navigated to a specific URL with different matching options.\n    \"\"\"\n    type: Literal[\"CheckUrlTest\"] = \"CheckUrlTest\"\n    url: str\n    match_type: Literal[\"exact\", \"contains\", \"regex\"] = \"contains\"\n    description: str = Field(default=\"Check if browser navigated to URL\")\n    def _execute_test(self, current_iteration: int, prompt: str, snapshot: BrowserSnapshot, browser_snapshots: List[BrowserSnapshot]) -> bool:\n        \"\"\"",
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "FindInHtmlTest",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class FindInHtmlTest(BaseTaskTest):\n    \"\"\"\n    Test class to find content in the current HTML with different matching strategies.\n    \"\"\"\n    type: Literal[\"FindInHtmlTest\"] = \"FindInHtmlTest\"\n    content: str = Field(..., description=\"Content to look for in the HTML\")\n    match_type: Literal[\"exact\", \"contains\", \"regex\"] = \"contains\"\n    description: str = Field(\n        default=\"Find content in HTML using specified matching strategy\",\n        description=\"Description of the test\",",
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckEventTest",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class CheckEventTest(BaseTaskTest):\n    \"\"\"\n    Test that checks if specific events were triggered based on event type and criteria.\n    \"\"\"\n    type: Literal[\"CheckEventTest\"] = \"CheckEventTest\"\n    event_name: str\n    event_criteria: Dict = Field(default_factory=dict)\n    description: str = Field(default=\"Check if specific event was triggered\")\n    def _execute_test(self, web_project: WebProject, current_iteration: int, prompt: str, snapshot: BrowserSnapshot, browser_snapshots: List[BrowserSnapshot]) -> bool:\n        \"\"\"",
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnHTML",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class JudgeBaseOnHTML(BaseTaskTest):\n    type: Literal[\"JudgeBaseOnHTML\"] = \"JudgeBaseOnHTML\"\n    success_criteria: str\n    description: str = Field(default=\"Judge based on HTML changes\")\n    def _execute_test(self, current_iteration: int, prompt: str, snapshot: BrowserSnapshot, browser_snapshots: List[BrowserSnapshot]) -> bool:\n        from autoppia_iwa.src.shared.web_utils import clean_html\n        if current_iteration == 0:\n            return False\n        html_before = clean_html(browser_snapshots[current_iteration - 1].current_html)\n        html_after = clean_html(snapshot.current_html)",
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnScreenshot",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class JudgeBaseOnScreenshot(BaseTaskTest):\n    type: Literal[\"JudgeBaseOnScreenshot\"] = \"JudgeBaseOnScreenshot\"\n    success_criteria: str\n    description: str = Field(default=\"Judge based on screenshot changes\")\n    def _execute_test(self, current_iteration: int, prompt: str, snapshot: BrowserSnapshot, browser_snapshots: List[BrowserSnapshot]) -> bool:\n        if current_iteration == 0:\n            return False\n        return self._analyze_screenshots(prompt, browser_snapshots)\n    def _analyze_screenshots(self, prompt: str, browser_snapshots: List[BrowserSnapshot], llm_service: ILLM = Provide[DIContainer.llm_service]) -> bool:\n        \"\"\"Analyzes screenshots to determine success based on LLM evaluation.\"\"\"",
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "WebProjectCheckEventTest",
        "kind": 6,
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class WebProjectCheckEventTest(BaseTaskTest):\n    \"\"\"\n    Test that checks if specific events were triggered with access to WebProject\n    \"\"\"\n    type: Literal[\"WebProjectCheckEventTest\"] = \"WebProjectCheckEventTest\"\n    event_name: str\n    event_criteria: Dict = Field(default_factory=dict)\n    description: str = Field(default=\"Check if specific event was triggered (with WebProject)\")\n    def execute_test(self, web_project: WebProject, current_iteration: int, prompt: str, snapshot: BrowserSnapshot, browser_snapshots: List[BrowserSnapshot]) -> bool:\n        \"\"\"",
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "RegistrationEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class RegistrationEvent(Event):\n    \"\"\"Event triggered when a user registration is completed\"\"\"\n    username: str\n    class ValidationCriteria(BaseModel):\n        \"\"\"Criteria for validating registration events\"\"\"\n        username: Optional[Union[str, CriterionValue]] = None\n    def validate_criteria(self, criteria: Optional[ValidationCriteria] = None) -> bool:\n        \"\"\"\n        Validate if this registration event meets the criteria.\n        \"\"\"",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "LoginEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class LoginEvent(Event):\n    \"\"\"Event triggered when a user logs in\"\"\"\n    username: str\n    class ValidationCriteria(BaseModel):\n        \"\"\"Criteria for validating login events\"\"\"\n        username: Optional[Union[str, CriterionValue]] = None\n    def validate_criteria(self, criteria: Optional[ValidationCriteria] = None) -> bool:\n        \"\"\"\n        Validate if this login event meets the criteria.\n        \"\"\"",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "LogoutEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class LogoutEvent(Event):\n    \"\"\"Event triggered when a user logs out\"\"\"\n    username: str\n    class ValidationCriteria(BaseModel):\n        \"\"\"Criteria for validating logout events\"\"\"\n        username: Optional[Union[str, CriterionValue]] = None\n    def validate_criteria(self, criteria: Optional[ValidationCriteria] = None) -> bool:\n        \"\"\"\n        Validate if this logout event meets the criteria.\n        \"\"\"",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "EditUserEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class EditUserEvent(Event):\n    \"\"\"Event triggered when a user edits their profile\"\"\"\n    user_id: Optional[int] = None\n    username: str\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    email: str\n    profile_id: Optional[int] = None\n    bio: Optional[str] = None\n    location: Optional[str] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "FilmDetailEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class FilmDetailEvent(Event):\n    \"\"\"Event triggered when a film detail page is viewed\"\"\"\n    movie_id: int\n    movie_name: str\n    movie_director: Optional[str] = None\n    movie_year: Optional[int] = None\n    movie_genres: List[str] = Field(default_factory=list)\n    movie_rating: Optional[float] = None\n    movie_duration: Optional[int] = None\n    movie_cast: Optional[str] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "AddFilmEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class AddFilmEvent(Event):\n    \"\"\"Event triggered when a user adds a new film\"\"\"\n    movie_id: int\n    movie_name: str\n    movie_director: Optional[str] = None\n    movie_year: Optional[int] = None\n    movie_genres: List[str] = Field(default_factory=list)\n    movie_rating: Optional[float] = None\n    movie_duration: Optional[int] = None\n    movie_cast: Optional[str] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "EditFilmEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class EditFilmEvent(Event):\n    \"\"\"Event triggered when a user edits an existing film\"\"\"\n    movie_id: int\n    movie_name: str\n    movie_director: Optional[str] = None\n    movie_year: Optional[int] = None\n    movie_genres: List[str] = Field(default_factory=list)\n    movie_rating: Optional[float] = None\n    movie_duration: Optional[int] = None\n    movie_cast: Optional[str] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "DeleteFilmEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class DeleteFilmEvent(Event):\n    \"\"\"Event triggered when a user deletes a film\"\"\"\n    movie_id: int\n    movie_name: str\n    movie_director: Optional[str] = None\n    movie_year: Optional[int] = None\n    movie_genres: List[str] = Field(default_factory=list)\n    movie_rating: Optional[float] = None\n    movie_duration: Optional[int] = None\n    class ValidationCriteria(BaseModel):",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "SearchFilmEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class SearchFilmEvent(Event):\n    \"\"\"Event triggered when a user searches for a film\"\"\"\n    query: str\n    class ValidationCriteria(BaseModel):\n        \"\"\"Criteria for validating search film events\"\"\"\n        query: Optional[Union[str, CriterionValue]] = None\n    def validate_criteria(self, criteria: Optional[ValidationCriteria] = None) -> bool:\n        \"\"\"\n        Validate if this search event meets the criteria.\n        \"\"\"",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "AddCommentEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class AddCommentEvent(Event):\n    \"\"\"Event triggered when a user adds a comment to a film\"\"\"\n    comment_id: int\n    commenter_name: str\n    content: str\n    movie_id: int\n    movie_name: str\n    class ValidationCriteria(BaseModel):\n        \"\"\"Criteria for validating add comment events\"\"\"\n        content_contains: Optional[Union[str, CriterionValue]] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "ContactEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class ContactEvent(Event):\n    \"\"\"Event triggered when a user submits a contact form\"\"\"\n    contact_id: int\n    name: str\n    email: str\n    subject: str\n    message: str\n    class ValidationCriteria(BaseModel):\n        \"\"\"Criteria for validating contact events\"\"\"\n        name: Optional[Union[str, CriterionValue]] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "FilterFilmEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "class FilterFilmEvent(Event):\n    \"\"\"Event triggered when a user filters films by genre and/or year\"\"\"\n    genre_id: Optional[int] = None\n    genre_name: Optional[str] = None\n    year: Optional[int] = None\n    filters_applied: Dict[str, bool] = Field(default_factory=dict)\n    class ValidationCriteria(BaseModel):\n        \"\"\"Criteria for validating filter film events\"\"\"\n        genre_id: Optional[Union[int, CriterionValue]] = None\n        genre_name: Optional[Union[str, CriterionValue]] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "EVENTS",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "EVENTS = [RegistrationEvent, LoginEvent, LogoutEvent, FilmDetailEvent, SearchFilmEvent, AddFilmEvent, EditFilmEvent, DeleteFilmEvent, AddCommentEvent, ContactEvent, EditUserEvent, FilterFilmEvent]\nBACKEND_EVENT_TYPES = {\n    'LOGIN': LoginEvent,\n    'LOGOUT': LogoutEvent,\n    'REGISTRATION': RegistrationEvent,\n    'EDIT_USER': EditUserEvent,\n    'FILM_DETAIL': FilmDetailEvent,\n    'SEARCH_FILM': SearchFilmEvent,\n    'ADD_FILM': AddFilmEvent,\n    'EDIT_FILM': EditFilmEvent,",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "BACKEND_EVENT_TYPES",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "BACKEND_EVENT_TYPES = {\n    'LOGIN': LoginEvent,\n    'LOGOUT': LogoutEvent,\n    'REGISTRATION': RegistrationEvent,\n    'EDIT_USER': EditUserEvent,\n    'FILM_DETAIL': FilmDetailEvent,\n    'SEARCH_FILM': SearchFilmEvent,\n    'ADD_FILM': AddFilmEvent,\n    'EDIT_FILM': EditFilmEvent,\n    'DELETE_FILM': DeleteFilmEvent,",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "login_criteria",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "login_criteria = LoginEvent.ValidationCriteria(\n    username=\"testuser\"\n)\n# Example 2: Advanced login validation with operators\nlogin_criteria_advanced = LoginEvent.ValidationCriteria(\n    username=CriterionValue(\n        value=\"testuser\", \n        operator=ComparisonOperator.EQUALS\n    )\n)",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "login_criteria_advanced",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "login_criteria_advanced = LoginEvent.ValidationCriteria(\n    username=CriterionValue(\n        value=\"testuser\", \n        operator=ComparisonOperator.EQUALS\n    )\n)\n# Example 3: Movie with rating ≥ 8.0 and runtime < 120 minutes\nmovie_criteria = FilmDetailEvent.ValidationCriteria(\n    rating=CriterionValue(value=8.0, operator=ComparisonOperator.GREATER_EQUAL),\n    duration=CriterionValue(value=120, operator=ComparisonOperator.LESS_THAN)",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "movie_criteria",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "movie_criteria = FilmDetailEvent.ValidationCriteria(\n    rating=CriterionValue(value=8.0, operator=ComparisonOperator.GREATER_EQUAL),\n    duration=CriterionValue(value=120, operator=ComparisonOperator.LESS_THAN)\n)\n# Example 4: Comedy movie directed by Spielberg after 2000\nmovie_criteria2 = FilmDetailEvent.ValidationCriteria(\n    genre=\"comedy\",\n    director=\"Spielberg\",\n    year=CriterionValue(value=2000, operator=ComparisonOperator.GREATER_THAN)\n)",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "movie_criteria2",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "peekOfCode": "movie_criteria2 = FilmDetailEvent.ValidationCriteria(\n    genre=\"comedy\",\n    director=\"Spielberg\",\n    year=CriterionValue(value=2000, operator=ComparisonOperator.GREATER_THAN)\n)\n\"\"\"",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.events",
        "documentation": {}
    },
    {
        "label": "FRONTEND_PORT_INDEX",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.main",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.main",
        "peekOfCode": "FRONTEND_PORT_INDEX = 0\nBACKEND_PORT_INDEX = 0\ncinema_project = WebProject(\n    id=\"cinema\",\n    name=\"Autoppia Cinema\",\n    frontend_url=get_frontend_url(index=FRONTEND_PORT_INDEX),\n    backend_url=get_backend_url(index=BACKEND_PORT_INDEX),\n    events=EVENTS,\n    relevant_data=RELEVANT_DATA,\n    models=MODELS,",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.main",
        "documentation": {}
    },
    {
        "label": "BACKEND_PORT_INDEX",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.main",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.main",
        "peekOfCode": "BACKEND_PORT_INDEX = 0\ncinema_project = WebProject(\n    id=\"cinema\",\n    name=\"Autoppia Cinema\",\n    frontend_url=get_frontend_url(index=FRONTEND_PORT_INDEX),\n    backend_url=get_backend_url(index=BACKEND_PORT_INDEX),\n    events=EVENTS,\n    relevant_data=RELEVANT_DATA,\n    models=MODELS,\n    use_cases=USE_CASES,",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.main",
        "documentation": {}
    },
    {
        "label": "cinema_project",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.main",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.main",
        "peekOfCode": "cinema_project = WebProject(\n    id=\"cinema\",\n    name=\"Autoppia Cinema\",\n    frontend_url=get_frontend_url(index=FRONTEND_PORT_INDEX),\n    backend_url=get_backend_url(index=BACKEND_PORT_INDEX),\n    events=EVENTS,\n    relevant_data=RELEVANT_DATA,\n    models=MODELS,\n    use_cases=USE_CASES,\n    urls=URLS,",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.main",
        "documentation": {}
    },
    {
        "label": "Genre",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "class Genre(BaseModel):\n    id: Optional[int] = None\n    name: str = Field(max_length=100)\n    model_config = {\"from_attributes\": True}\nclass Comment(BaseModel):\n    id: Optional[int] = None\n    movie_id: int\n    name: str = Field(max_length=100)\n    content: str\n    created_at: Optional[datetime] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "class Comment(BaseModel):\n    id: Optional[int] = None\n    movie_id: int\n    name: str = Field(max_length=100)\n    content: str\n    created_at: Optional[datetime] = None\n    avatar: Optional[str] = None\n    model_config = {\"from_attributes\": True}\nclass Movie(BaseModel):\n    id: Optional[int] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "class Movie(BaseModel):\n    id: Optional[int] = None\n    name: str = Field(max_length=250)\n    desc: str\n    year: int = Field(ge=1900, le=2100)\n    img: str\n    director: Optional[str] = Field(None, max_length=250)\n    cast: Optional[str] = None\n    duration: Optional[int] = Field(None, description=\"Duration in minutes\")\n    trailer_url: Optional[AnyUrl] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "class UserProfile(BaseModel):\n    id: Optional[int] = None\n    user_id: int\n    bio: Optional[str] = Field(None, max_length=500)\n    profile_pic: Optional[str] = None\n    favorite_genres: List[Genre] = []\n    website: Optional[AnyUrl] = None\n    location: Optional[str] = Field(None, max_length=100)\n    model_config = {\"from_attributes\": True}\nclass User(BaseModel):",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "class User(BaseModel):\n    id: Optional[int] = None\n    username: str\n    email: str\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    profile: Optional[UserProfile] = None\n    model_config = {\"from_attributes\": True}\nclass ContactMessage(BaseModel):\n    id: Optional[int] = None",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "ContactMessage",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "class ContactMessage(BaseModel):\n    id: Optional[int] = None\n    name: str = Field(max_length=100)\n    email: str\n    subject: str = Field(max_length=200)\n    message: str\n    created_at: Optional[datetime] = None\n    model_config = {\"from_attributes\": True}\nMODELS = [Genre, Comment, Movie, UserProfile, User, ContactMessage]\n# ================ Data Generation Functions ================",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "generate_fake_genre",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "def generate_fake_genre() -> Genre:\n    return Genre(id=faker.random_int(min=1, max=100), name=faker.word().capitalize())\ndef generate_fake_movie() -> Movie:\n    return Movie(\n        id=faker.random_int(min=1, max=1000),\n        name=faker.catch_phrase(),\n        desc=faker.text(),\n        year=faker.random_int(min=1950, max=2023),\n        img=f\"gallery/{faker.file_name(extension='jpg')}\",\n        director=faker.name(),",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "generate_fake_movie",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "def generate_fake_movie() -> Movie:\n    return Movie(\n        id=faker.random_int(min=1, max=1000),\n        name=faker.catch_phrase(),\n        desc=faker.text(),\n        year=faker.random_int(min=1950, max=2023),\n        img=f\"gallery/{faker.file_name(extension='jpg')}\",\n        director=faker.name(),\n        cast=\", \".join([faker.name() for _ in range(3)]),\n        duration=faker.random_int(min=60, max=180),",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "generate_fake_comment",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "def generate_fake_comment(movie_id: Optional[int] = None) -> Comment:\n    return Comment(\n        id=faker.random_int(min=1, max=1000),\n        movie_id=movie_id or faker.random_int(min=1, max=100),\n        name=faker.name(),\n        content=faker.text(),\n        created_at=faker.date_time_this_year(),\n        avatar=f\"gallery/avatars/{faker.file_name(extension='jpg')}\" if faker.boolean() else None,\n    )\ndef generate_fake_user_profile(user_id: Optional[int] = None) -> UserProfile:",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "generate_fake_user_profile",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "def generate_fake_user_profile(user_id: Optional[int] = None) -> UserProfile:\n    return UserProfile(\n        id=faker.random_int(min=1, max=1000),\n        user_id=user_id or faker.random_int(min=1, max=100),\n        bio=faker.text(max_nb_chars=200) if faker.boolean() else None,\n        profile_pic=f\"gallery/profiles/{faker.file_name(extension='jpg')}\" if faker.boolean() else None,\n        favorite_genres=[generate_fake_genre() for _ in range(faker.random_int(min=0, max=3))],\n        website=faker.url() if faker.boolean() else None,\n        location=faker.city() if faker.boolean() else None,\n    )",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "generate_fake_user",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "def generate_fake_user() -> User:\n    user_id = faker.random_int(min=1, max=100)\n    return User(id=user_id, username=faker.user_name(), email=faker.email(), first_name=faker.first_name(), last_name=faker.last_name(), profile=generate_fake_user_profile(user_id))\ndef generate_fake_contact_message() -> ContactMessage:\n    return ContactMessage(\n        id=faker.random_int(min=1, max=1000), name=faker.name(), email=faker.email(), subject=faker.sentence(), message=faker.text(max_nb_chars=200), created_at=faker.date_time_this_year()\n    )\ndef generate_fake_data(count: int = 5) -> Dict[str, List[Any]]:\n    \"\"\"Generate fake data for all models\"\"\"\n    movies = [generate_fake_movie() for _ in range(count)]",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "generate_fake_contact_message",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "def generate_fake_contact_message() -> ContactMessage:\n    return ContactMessage(\n        id=faker.random_int(min=1, max=1000), name=faker.name(), email=faker.email(), subject=faker.sentence(), message=faker.text(max_nb_chars=200), created_at=faker.date_time_this_year()\n    )\ndef generate_fake_data(count: int = 5) -> Dict[str, List[Any]]:\n    \"\"\"Generate fake data for all models\"\"\"\n    movies = [generate_fake_movie() for _ in range(count)]\n    # Add comments to movies\n    for movie in movies:\n        movie.comments = [generate_fake_comment(movie.id) for _ in range(faker.random_int(min=0, max=5))]",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "generate_fake_data",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "def generate_fake_data(count: int = 5) -> Dict[str, List[Any]]:\n    \"\"\"Generate fake data for all models\"\"\"\n    movies = [generate_fake_movie() for _ in range(count)]\n    # Add comments to movies\n    for movie in movies:\n        movie.comments = [generate_fake_comment(movie.id) for _ in range(faker.random_int(min=0, max=5))]\n    return {\n        \"genres\": [generate_fake_genre() for _ in range(count)],\n        \"movies\": movies,\n        \"comments\": [c for m in movies for c in m.comments],",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "MODELS = [Genre, Comment, Movie, UserProfile, User, ContactMessage]\n# ================ Data Generation Functions ================\n# Initialize Faker\nfaker = Faker()\ndef generate_fake_genre() -> Genre:\n    return Genre(id=faker.random_int(min=1, max=100), name=faker.word().capitalize())\ndef generate_fake_movie() -> Movie:\n    return Movie(\n        id=faker.random_int(min=1, max=1000),\n        name=faker.catch_phrase(),",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "faker",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "peekOfCode": "faker = Faker()\ndef generate_fake_genre() -> Genre:\n    return Genre(id=faker.random_int(min=1, max=100), name=faker.word().capitalize())\ndef generate_fake_movie() -> Movie:\n    return Movie(\n        id=faker.random_int(min=1, max=1000),\n        name=faker.catch_phrase(),\n        desc=faker.text(),\n        year=faker.random_int(min=1950, max=2023),\n        img=f\"gallery/{faker.file_name(extension='jpg')}\",",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.models",
        "documentation": {}
    },
    {
        "label": "RELEVANT_DATA",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.relevant_data",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.relevant_data",
        "peekOfCode": "RELEVANT_DATA = {\n    \"user_for_login\": {\"username\": \"test1234\", \"email\": \"test1234@gmail.com\", \"password\": \"test1234\"},\n}",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.relevant_data",
        "documentation": {}
    },
    {
        "label": "URLS",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.urls",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.urls",
        "peekOfCode": "URLS = [\n    \"http://127.0.0.1:8000/\",\n    \"http://127.0.0.1:8000/about/\",\n    \"http://127.0.0.1:8000/contact/\",\n    \"http://127.0.0.1:8000/login/\",\n    \"http://127.0.0.1:8000/register/\",\n    \"http://127.0.0.1:8000/add/\",\n    \"http://127.0.0.1:8000/movie/10/\",\n    \"http://127.0.0.1:8000/movie/9/\",\n    \"http://127.0.0.1:8000/movie/8/\",",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.urls",
        "documentation": {}
    },
    {
        "label": "USE_CASES",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.projects.cinema_1.use_cases",
        "description": "autoppia_iwa.src.demo_webs.projects.cinema_1.use_cases",
        "peekOfCode": "USE_CASES = [\n    UseCase(\n        name=\"User Registration\",\n        description=\"The user fills out the registration form and successfully creates a new account.\",\n        prompt_template=\"Register a new user\",\n        prompt_examples=[\"Fill out the registration form and register\", \"Register a new user\", \"Create a new account\"],\n        event=RegistrationEvent,\n        event_source_code=RegistrationEvent.get_source_code_of_class(),\n        examples=[\n            (",
        "detail": "autoppia_iwa.src.demo_webs.projects.cinema_1.use_cases",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.base_events",
        "description": "autoppia_iwa.src.demo_webs.projects.base_events",
        "peekOfCode": "class Event(BaseModel):\n    \"\"\"Base event class for all event types\"\"\"\n    event_name: str\n    timestamp: int\n    web_agent_id: int\n    user_id: Optional[int] = None\n    class ValidationCriteria(BaseModel):\n        pass\n    def validate_criteria(self) -> bool:\n        \"\"\"Check if this event meets the validation criteria\"\"\"",
        "detail": "autoppia_iwa.src.demo_webs.projects.base_events",
        "documentation": {}
    },
    {
        "label": "ComparisonOperator",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "description": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "peekOfCode": "class ComparisonOperator(str, Enum):\n    \"\"\"Operators for flexible criterion comparison\"\"\"\n    EQUALS = \"equals\"\n    NOT_EQUALS = \"not_equals\"\n    CONTAINS = \"contains\"\n    NOT_CONTAINS = \"not_contains\"\n    GREATER_THAN = \"greater_than\"\n    LESS_THAN = \"less_than\"\n    GREATER_EQUAL = \"greater_equal\"\n    LESS_EQUAL = \"less_equal\"",
        "detail": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "documentation": {}
    },
    {
        "label": "CriterionValue",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "description": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "peekOfCode": "class CriterionValue(BaseModel):\n    \"\"\"A validation criterion with its comparison operator\"\"\"\n    value: Any\n    operator: ComparisonOperator = ComparisonOperator.EQUALS\n# ================ Helper Methods for Criterion Validation ================\ndef validate_criterion(actual_value: Any, criterion: Union[Any, CriterionValue]) -> bool:\n    \"\"\"\n    Validate a single criterion against an actual value\n    Args:\n        actual_value: The value from the event to validate",
        "detail": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "documentation": {}
    },
    {
        "label": "validate_criterion",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "description": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "peekOfCode": "def validate_criterion(actual_value: Any, criterion: Union[Any, CriterionValue]) -> bool:\n    \"\"\"\n    Validate a single criterion against an actual value\n    Args:\n        actual_value: The value from the event to validate\n        criterion: Either a simple value or a CriterionValue with operator\n    Returns:\n        True if the criterion is met, False otherwise\n    \"\"\"\n    # If criterion is a simple value, use default comparison",
        "detail": "autoppia_iwa.src.demo_webs.projects.criterion_helper",
        "documentation": {}
    },
    {
        "label": "UseCase",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "peekOfCode": "class UseCase(BaseModel):\n    \"\"\"Represents a use case in the application\"\"\"\n    name: str\n    description: str\n    prompt_template: str\n    prompt_examples: List[str]\n    event: Type\n    event_source_code: str\n    examples: List[Tuple[str, dict]]\n    def get_prompt(self, **kwargs) -> str:",
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "peekOfCode": "class WebProject(BaseModel):\n    id: str = Field(..., description=\"Unique identifier of the web project\")\n    name: str = Field(..., min_length=1, description=\"Name of the web project\")\n    backend_url: str = Field(..., description=\"URL of the backend server\")\n    frontend_url: str = Field(..., description=\"URL of the frontend application\")\n    is_web_real: bool = False\n    urls: List[str] = []\n    domain_analysis: Optional[DomainAnalysis] = None\n    events: List[Type] = Field(default_factory=dict, description=\"Structured events information\")\n    relevant_data: Dict[str, Any] = Field(default_factory=dict, description=\"Structured additional information about the web project\")",
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "peekOfCode": "class BackendEvent(BaseModel):\n    \"\"\"\n    Represents a validated event payload with application-specific constraints.\n    Enforces proper event-application relationships and provides rich metadata.\n    \"\"\"\n    event_type: str\n    description: str\n    data: Optional[Dict[str, Any]] = None\n    user_id: Optional[int] = None\n    created_at: datetime = datetime.now()",
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "demo_web_projects",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "peekOfCode": "demo_web_projects = [cinema_project]\ntest_demo_web_projects = [WebProject(id=\"autoppia\", name=\"Autoppia\", backend_url=\"\", frontend_url=\"https://www.autoppia.com\", is_web_real=True, events=[], relevant_data={})]",
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "test_demo_web_projects",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "peekOfCode": "test_demo_web_projects = [WebProject(id=\"autoppia\", name=\"Autoppia\", backend_url=\"\", frontend_url=\"https://www.autoppia.com\", is_web_real=True, events=[], relevant_data={})]",
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "kind": 6,
        "importPath": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "description": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "peekOfCode": "class BackendDemoWebService:\n    \"\"\"\n    Service for interacting with the backend of demo web endpoints.\n    Stores the web_project on initialization and uses its backend_url for API calls.\n    \"\"\"\n    def __init__(self, web_project: WebProject) -> None:\n        \"\"\"\n        Initialize a single aiohttp session holder and store the web_project.\n        Args:\n            web_project: The web project containing the backend_url to use",
        "detail": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "description": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BackendDemoWebService:\n    \"\"\"\n    Service for interacting with the backend of demo web endpoints.\n    Stores the web_project on initialization and uses its backend_url for API calls.\n    \"\"\"\n    def __init__(self, web_project: WebProject) -> None:\n        \"\"\"\n        Initialize a single aiohttp session holder and store the web_project.\n        Args:",
        "detail": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "documentation": {}
    },
    {
        "label": "get_frontend_url",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "peekOfCode": "def get_frontend_url(index):\n    return f\"{DEMO_WEBS_ENDPOINT}:{str(8000 + index) + '/'}\"\ndef get_backend_url(index: int, symetric=True):\n    if symetric:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + index) + '/'}\"\n    else:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + index + 1) + '/'}\"\nasync def initialize_demo_webs_projects(demo_web_projects: List[WebProject]):\n    for demo_web_project in demo_web_projects:\n        await _load_web_analysis(demo_web_project)",
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "get_backend_url",
        "kind": 2,
        "importPath": "autoppia_iwa.src.demo_webs.utils",
        "description": "autoppia_iwa.src.demo_webs.utils",
        "peekOfCode": "def get_backend_url(index: int, symetric=True):\n    if symetric:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + index) + '/'}\"\n    else:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + index + 1) + '/'}\"\nasync def initialize_demo_webs_projects(demo_web_projects: List[WebProject]):\n    for demo_web_project in demo_web_projects:\n        await _load_web_analysis(demo_web_project)\n    return demo_web_projects\nasync def _run_web_analysis(",
        "detail": "autoppia_iwa.src.demo_webs.utils",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "kind": 6,
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "peekOfCode": "class ConcurrentEvaluator(IEvaluator):\n    def __init__(self, web_project: WebProject, config: EvaluatorConfig):\n        self.config = config\n        self._random_clicker_cache: Dict[str, Tuple[List[int], float]] = {}\n        self.total_evaluation_time = 0.0\n        self.evaluation_count = 0\n        self.web_project = web_project\n        self.backend_demo_webs_service = BackendDemoWebService(web_project=web_project)\n        # Statistics collection\n        self.evaluation_stats: List[EvaluationStats] = []",
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "FeedbackGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "description": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "peekOfCode": "class FeedbackGenerator:\n    @staticmethod\n    def calculate_score(success_count: int, total_count: int, scale: int = 10) -> float:\n        \"\"\"Calculate a score based on the ratio of successes to the total count.\"\"\"\n        return (success_count / total_count) * scale if total_count > 0 else 0\n    @staticmethod\n    def calculate_time_penalty(total_execution_time: float, expected_time: float) -> float:\n        \"\"\"\n        Calculate the time penalty based on the extra execution time.\n        For every 5 extra seconds beyond the expected time, 0.5 points are subtracted.",
        "detail": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "documentation": {}
    },
    {
        "label": "TestRunner",
        "kind": 6,
        "importPath": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "description": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "peekOfCode": "class TestRunner:\n    def __init__(self, tests: List[BaseTaskTest]):\n        self.tests = tests\n    def run_tests(\n        self,\n        prompt: str,\n        snapshot: BrowserSnapshot,\n        browser_snapshots: List[BrowserSnapshot],\n        current_action_index: int,\n        total_iterations: int,",
        "detail": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "documentation": {}
    },
    {
        "label": "display_single_evaluation_summary",
        "kind": 2,
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "peekOfCode": "def display_single_evaluation_summary(stats: EvaluationStats, debug_mode: bool = False):\n    \"\"\"\n    Displays a concise summary of a single evaluation (for a single agent's solution).\n    Args:\n        stats (EvaluationStats): The statistics object containing all evaluation details.\n        debug_mode (bool): If True, we skip or reduce verbosity.\n    \"\"\"\n    _ = stats.get_summary_dict()  # Ensure internal stats are calculated\n    if debug_mode:\n        return  # Skip printing in debug mode",
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "display_batch_evaluation_summary",
        "kind": 2,
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "peekOfCode": "def display_batch_evaluation_summary(\n    task_id: str,\n    evaluation_stats: List[EvaluationStats],\n    debug_mode: bool,\n    action_type_timing: Dict[str, List[float]],\n    errors: List[str],\n):\n    \"\"\"\n    Displays a concise summary of all evaluations for a single task (batch of solutions).\n    Args:",
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "run_tests",
        "kind": 2,
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "peekOfCode": "def run_tests(task: Task, execution_history: List[ActionExecutionResult]) -> List[List[TestResult]]:\n    \"\"\"\n    Runs all task tests after each action, building a test results matrix.\n    Args:\n        task (Task): The task being evaluated (contains the list of tests).\n        execution_history (List[ActionExecutionResult]): History of all executed actions.\n    Returns:\n        List[List[TestResult]]: A matrix where each row corresponds to an action and\n                                each column to a test, indicating pass/fail results.\n    \"\"\"",
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "generate_feedback",
        "kind": 2,
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "peekOfCode": "def generate_feedback(task: Task, execution_history: List[ActionExecutionResult], test_results_matrix: List[List[TestResult]]) -> Feedback:\n    \"\"\"\n    Generates feedback based on the given test results.\n    Args:\n        task (Task): The task being evaluated (contains the prompt or description).\n        execution_history (List[ActionExecutionResult]): History of executed actions.\n        test_results_matrix (List[List[TestResult]]): The matrix of pass/fail test results.\n    Returns:\n        Feedback: The generated feedback for this task solution.\n    \"\"\"",
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "hash_actions",
        "kind": 2,
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "peekOfCode": "def hash_actions(actions: List[BaseAction]) -> str:\n    \"\"\"\n    Hash a list of actions so we can identify identical solutions by comparing their hash.\n    Args:\n        actions (List[BaseAction]): The list of actions to hash\n    Returns:\n        str: A hash string representing the actions\n    \"\"\"\n    try:\n        action_repr = \"|\".join(str(a.model_dump()) for a in actions)",
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "initialize_test_results_matrix",
        "kind": 2,
        "importPath": "autoppia_iwa.src.evaluation.evaluator.utils",
        "description": "autoppia_iwa.src.evaluation.evaluator.utils",
        "peekOfCode": "def initialize_test_results_matrix(task: Task, num_actions: int):\n    \"\"\"\n    Initialize a test results matrix based on the number of tests in the task and actions.\n    All test results are initialized with success=False.\n    Args:\n        task (Task): The Task object containing tests\n        num_actions (int): Number of actions\n    Returns:\n        List[List[TestResult]]: A matrix of test results\n    \"\"\"",
        "detail": "autoppia_iwa.src.evaluation.evaluator.utils",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "kind": 6,
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class TestResult(BaseModel):\n    \"\"\"Represents the evaluation result of a single test.\"\"\"\n    success: bool  # True if the test passed, False otherwise\n    extra_data: Optional[dict] = None  # Additional data related to the test\nclass Feedback(BaseModel):\n    task_prompt: str  # The description of the task being evaluated\n    final_score: float  # Overall evaluation score (0-10)\n    executed_actions: int  # Number of successfully executed actions\n    failed_actions: int  # Number of failed actions\n    passed_tests: int  # Number of tests that passed",
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "kind": 6,
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class Feedback(BaseModel):\n    task_prompt: str  # The description of the task being evaluated\n    final_score: float  # Overall evaluation score (0-10)\n    executed_actions: int  # Number of successfully executed actions\n    failed_actions: int  # Number of failed actions\n    passed_tests: int  # Number of tests that passed\n    failed_tests: int  # Number of tests that failed\n    total_execution_time: float  # Total time taken for execution\n    time_penalty: float  # Penalty points for exceeding expected time\n    critical_test_penalty: int  # Penalty points for failing critical tests",
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationStats",
        "kind": 6,
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class EvaluationStats(BaseModel):\n    \"\"\"Statistics for a single evaluation\"\"\"\n    web_agent_id: str\n    task_id: str\n    action_count: int\n    action_types: Dict[str, int] = Field(default_factory=dict)\n    # Timing stats\n    start_time: float\n    total_time: float = 0\n    browser_setup_time: float = 0",
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "kind": 6,
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class EvaluationResult(BaseModel):\n    \"\"\"Encapsulates the output of a task evaluation.\"\"\"\n    final_score: float = 0\n    test_results_matrix: List[List[TestResult]]  # List of test evaluation results\n    execution_history: List[ActionExecutionResult]  # History of all actions executed\n    feedback: Optional[Feedback] = None  # Feedback generated during the evaluation\n    web_agent_id: Optional[str] = None\n    raw_score: float = 0.0\n    random_clicker_score: float = 0.0\n    random_clicker_passed_tests_indexes: List[int] = Field(default_factory=list)",
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class EvaluatorConfig(BaseModel):\n    save_results_in_db: bool = False\n    task_delay_in_seconds: float = Field(default=0.1, gt=0)\n    chunk_size: int = Field(default=20, gt=0)\n    browser_timeout: float = Field(default=10000, gt=0)\n    event_monitor_interval: float = Field(default=0.1, gt=0, le=0.5)\n    enable_grouping_tasks: bool = Field(default=True)\n    normalize_score_with_random_clicker: bool = Field(default=True)\n    cache_random_clicker_results: bool = Field(default=True)\n    normalize_scores: bool = Field(default=True)",
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "IEvaluator",
        "kind": 6,
        "importPath": "autoppia_iwa.src.evaluation.interfaces",
        "description": "autoppia_iwa.src.evaluation.interfaces",
        "peekOfCode": "class IEvaluator(ABC):\n    \"\"\"\n    The design allows for multiple web agents to implement this interface, ensuring standardized inputs and behaviors across different agents.\n    Every web agent that implements this interface must define the required methods and properties, ensuring consistency and compatibility.\n    Example:\n    - An 'Autopilot Web Agent' would implement this interface, adhering to the standardized inputs and outputs specified here.\n    The goal is to provide a common structure that all web agents will follow, facilitating integration and interoperability among them.\n    \"\"\"\n    @abstractmethod\n    async def evaluate_single_task_solution(self, task: Task, task_solution: TaskSolution) -> EvaluationResult:",
        "detail": "autoppia_iwa.src.evaluation.interfaces",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class ClickAction(BaseActionWithSelector):\n    type: Literal[\"ClickAction\"] = \"ClickAction\"\n    x: Optional[int] = None\n    y: Optional[int] = None\n    @log_action(\"ClickAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        if self.selector:\n            selector_str = self.validate_selector()\n            await page.click(selector_str)\n        elif self.x is not None and self.y is not None:",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "DoubleClickAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class DoubleClickAction(BaseActionWithSelector):\n    type: Literal[\"DoubleClickAction\"] = \"DoubleClickAction\"\n    @log_action(\"DoubleClickAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        selector_str = self.validate_selector()\n        await page.dblclick(selector_str)\nclass NavigateAction(BaseAction):\n    type: Literal[\"NavigateAction\"] = \"NavigateAction\"\n    url: Optional[str] = \"\"\n    go_back: bool = False",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "NavigateAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class NavigateAction(BaseAction):\n    type: Literal[\"NavigateAction\"] = \"NavigateAction\"\n    url: Optional[str] = \"\"\n    go_back: bool = False\n    go_forward: bool = False\n    @log_action(\"NavigateAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        if self.go_back:\n            await page.go_back()\n        elif self.go_forward:",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "TypeAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class TypeAction(BaseActionWithSelector):\n    type: Literal[\"TypeAction\"] = \"TypeAction\"\n    text: str\n    @log_action(\"TypeAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel_str = self.validate_selector()\n        await page.fill(sel_str, self.text)\nclass SelectAction(BaseActionWithSelector):\n    type: Literal[\"SelectAction\"] = \"SelectAction\"\n    value: str",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SelectAction(BaseActionWithSelector):\n    type: Literal[\"SelectAction\"] = \"SelectAction\"\n    value: str\n    @log_action(\"SelectAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel_str = self.validate_selector()\n        await page.select_option(sel_str, self.value)\nclass HoverAction(BaseActionWithSelector):\n    type: Literal[\"HoverAction\"] = \"HoverAction\"\n    @log_action(\"HoverAction\")",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "HoverAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class HoverAction(BaseActionWithSelector):\n    type: Literal[\"HoverAction\"] = \"HoverAction\"\n    @log_action(\"HoverAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel_str = self.validate_selector()\n        await page.hover(sel_str)\nclass WaitAction(BaseActionWithSelector):\n    type: Literal[\"WaitAction\"] = \"WaitAction\"\n    time_seconds: Optional[float] = None\n    @log_action(\"WaitAction\")",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "WaitAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class WaitAction(BaseActionWithSelector):\n    type: Literal[\"WaitAction\"] = \"WaitAction\"\n    time_seconds: Optional[float] = None\n    @log_action(\"WaitAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        if self.selector:\n            sel_str = self.validate_selector()\n            await page.wait_for_selector(sel_str, timeout=self.time_seconds * 1000 if self.time_seconds else None)\n        elif self.time_seconds:\n            await page.wait_for_timeout(self.time_seconds * 1000)",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ScrollAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class ScrollAction(BaseAction):\n    type: Literal[\"ScrollAction\"] = \"ScrollAction\"\n    value: Optional[Union[str, int]] = None\n    up: bool = False\n    down: bool = False\n    async def _scroll_by_value(self, page: Page, value: int) -> None:\n        \"\"\"Scroll the page by a fixed amount.\"\"\"\n        try:\n            if self.up:\n                await page.evaluate(f\"window.scrollBy(0, -{value});\")",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SubmitAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SubmitAction(BaseActionWithSelector):\n    type: Literal[\"SubmitAction\"] = \"SubmitAction\"\n    @log_action(\"SubmitAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel_str = self.validate_selector()\n        await page.locator(sel_str).press(\"Enter\")\nclass AssertAction(BaseAction):\n    type: Literal[\"AssertAction\"] = \"AssertAction\"\n    text_to_assert: str\n    @log_action(\"AssertAction\")",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "AssertAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class AssertAction(BaseAction):\n    type: Literal[\"AssertAction\"] = \"AssertAction\"\n    text_to_assert: str\n    @log_action(\"AssertAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        content = await page.content()\n        if self.text_to_assert not in content:\n            raise AssertionError(f\"'{self.text_to_assert}' not found in page source.\")\nclass DragAndDropAction(BaseAction):\n    type: Literal[\"DragAndDropAction\"] = \"DragAndDropAction\"",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "DragAndDropAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class DragAndDropAction(BaseAction):\n    type: Literal[\"DragAndDropAction\"] = \"DragAndDropAction\"\n    source_selector: str = Field(..., alias=\"sourceSelector\")\n    target_selector: str = Field(..., alias=\"targetSelector\")\n    @log_action(\"DragAndDropAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.drag_and_drop(self.source_selector, self.target_selector)\nclass ScreenshotAction(BaseAction):\n    type: Literal[\"ScreenshotAction\"] = \"ScreenshotAction\"\n    file_path: str",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ScreenshotAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class ScreenshotAction(BaseAction):\n    type: Literal[\"ScreenshotAction\"] = \"ScreenshotAction\"\n    file_path: str\n    @log_action(\"ScreenshotAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.screenshot(path=self.file_path)\nclass SendKeysIWAAction(BaseAction):\n    type: Literal[\"SendKeysIWAAction\"] = \"SendKeysIWAAction\"\n    keys: str\n    @log_action(\"SendKeysIWAAction\")",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SendKeysIWAAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SendKeysIWAAction(BaseAction):\n    type: Literal[\"SendKeysIWAAction\"] = \"SendKeysIWAAction\"\n    keys: str\n    @log_action(\"SendKeysIWAAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.keyboard.press(self.keys)\nclass GetDropDownOptions(BaseActionWithSelector):\n    type: Literal[\"GetDropDownOptions\"] = \"GetDropDownOptions\"\n    @log_action(\"GetDropDownOptions\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "GetDropDownOptions",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class GetDropDownOptions(BaseActionWithSelector):\n    type: Literal[\"GetDropDownOptions\"] = \"GetDropDownOptions\"\n    @log_action(\"GetDropDownOptions\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        xpath = self.validate_selector()\n        all_options = []\n        frame_index = 0\n        for frame in page.frames:\n            try:\n                options = await frame.evaluate(",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectDropDownOption",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SelectDropDownOption(BaseActionWithSelector):\n    type: Literal[\"SelectDropDownOption\"] = \"SelectDropDownOption\"\n    text: str\n    @log_action(\"SelectDropDownOption\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        xpath = self.validate_selector()\n        frame_index = 0\n        found = False\n        for frame in page.frames:\n            try:",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "UndefinedAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class UndefinedAction(BaseAction):\n    type: Literal[\"UndefinedAction\"] = \"UndefinedAction\"\n    @log_action(\"UndefinedAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        pass\nclass IdleAction(BaseAction):\n    type: Literal[\"IdleAction\"] = \"IdleAction\"\n    @log_action(\"IdleAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        pass",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "IdleAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class IdleAction(BaseAction):\n    type: Literal[\"IdleAction\"] = \"IdleAction\"\n    @log_action(\"IdleAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        pass\n# -------------------------------------------------------------------\n# Union Type to Handle All Actions by Discriminator\n# -------------------------------------------------------------------\nAllActionsUnion = Annotated[\n    Union[",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "log_action",
        "kind": 2,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "def log_action(action_name: str):\n    \"\"\"Decorator to log action execution around the `execute` call.\"\"\"\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(self, page: Optional[Page], backend_service, web_agent_id: str):\n            action_logger.debug(f\"Executing {action_name} with data: {self.model_dump()}\")\n            try:\n                return await func(self, page, backend_service, web_agent_id)\n            except Exception as e:\n                # error_details = traceback.format_exc()",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "action_logger",
        "kind": 5,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "action_logger = logger.bind(action=\"autoppia_action\")\nlogger.disable(\"autoppia_action\")  # Disable logging for agent actions execution as its so annoying\ndef log_action(action_name: str):\n    \"\"\"Decorator to log action execution around the `execute` call.\"\"\"\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(self, page: Optional[Page], backend_service, web_agent_id: str):\n            action_logger.debug(f\"Executing {action_name} with data: {self.model_dump()}\")\n            try:\n                return await func(self, page, backend_service, web_agent_id)",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "AllActionsUnion",
        "kind": 5,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "AllActionsUnion = Annotated[\n    Union[\n        ClickAction,\n        DoubleClickAction,\n        NavigateAction,\n        TypeAction,\n        SelectAction,\n        HoverAction,\n        WaitAction,\n        ScrollAction,",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP_LOWER",
        "kind": 5,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "ACTION_CLASS_MAP_LOWER = {\n    \"click\": ClickAction,\n    \"type\": TypeAction,\n    \"hover\": HoverAction,\n    \"navigate\": NavigateAction,\n    \"dragAndDrop\": DragAndDropAction,\n    \"submit\": SubmitAction,\n    \"doubleClick\": DoubleClickAction,\n    \"scroll\": ScrollAction,\n    \"screenshot\": ScreenshotAction,",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP_CAPS",
        "kind": 5,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "ACTION_CLASS_MAP_CAPS = {\n    \"ClickAction\": ClickAction,\n    \"TypeAction\": TypeAction,\n    \"HoverAction\": HoverAction,\n    \"NavigateAction\": NavigateAction,\n    \"DragAndDropAction\": DragAndDropAction,\n    \"SubmitAction\": SubmitAction,\n    \"DoubleClickAction\": DoubleClickAction,\n    \"ScrollAction\": ScrollAction,\n    \"ScreenshotAction\": ScreenshotAction,",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "kind": 5,
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "ACTION_CLASS_MAP = {**ACTION_CLASS_MAP_CAPS, **ACTION_CLASS_MAP_LOWER}",
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectorType",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class SelectorType(str, Enum):\n    ATTRIBUTE_VALUE_SELECTOR = \"attributeValueSelector\"\n    TAG_CONTAINS_SELECTOR = \"tagContainsSelector\"\n    XPATH_SELECTOR = \"xpathSelector\"\nclass Selector(BaseModel):\n    type: SelectorType\n    attribute: Optional[str] = None\n    value: str\n    case_sensitive: bool = False\n    def to_playwright_selector(self) -> str:",
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "Selector",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class Selector(BaseModel):\n    type: SelectorType\n    attribute: Optional[str] = None\n    value: str\n    case_sensitive: bool = False\n    def to_playwright_selector(self) -> str:\n        \"\"\"\n        Returns the final selector string for use with Playwright.\n        \"\"\"\n        ATTRIBUTE_FORMATS = {",
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "ActionRegistry",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class ActionRegistry:\n    \"\"\"Registry to store and retrieve action subclasses.\"\"\"\n    _registry: Dict[str, Type[\"BaseAction\"]] = {}\n    @classmethod\n    def register(cls, action_type: str, action_class: Type[\"BaseAction\"]):\n        \"\"\"Register an action class with a simplified key.\"\"\"\n        # Register with a lowercase version of action_type without \"Action\"\n        action_key = action_type.replace(\"Action\", \"\").lower()\n        cls._registry[action_key] = action_class\n    @classmethod",
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class BaseAction(BaseModel):\n    \"\"\"\n    Base for all actions with a discriminating 'type' field.\n    \"\"\"\n    type: str = Field(..., description=\"Discriminated action type\")\n    class Config:\n        extra = \"allow\"\n    def __init_subclass__(cls, **kwargs):\n        \"\"\"Automatically register subclasses in the ActionRegistry.\"\"\"\n        super().__init_subclass__(**kwargs)",
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseActionWithSelector",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class BaseActionWithSelector(BaseAction):\n    selector: Optional[Selector] = None\n    def validate_selector(self) -> str:\n        if not self.selector:\n            raise ValueError(\"Selector is required for this action.\")\n        return self.selector.to_playwright_selector()",
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# ------------------------------------------------------\n# SELECTOR LOGIC\n# ------------------------------------------------------\nclass SelectorType(str, Enum):\n    ATTRIBUTE_VALUE_SELECTOR = \"attributeValueSelector\"\n    TAG_CONTAINS_SELECTOR = \"tagContainsSelector\"\n    XPATH_SELECTOR = \"xpathSelector\"\nclass Selector(BaseModel):\n    type: SelectorType",
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "PlaywrightBrowserExecutor",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.browser_executor",
        "description": "autoppia_iwa.src.execution.browser_executor",
        "peekOfCode": "class PlaywrightBrowserExecutor:\n    def __init__(self, browser_config: BrowserSpecification, page: Optional[Page] = None, backend_demo_webs_service: BackendDemoWebService = None):\n        \"\"\"\n        Initializes the PlaywrightBrowserExecutor with a backend service and an optional Playwright page.\n        Args:\n            backend_demo_webs_service: Service for interacting with the backend.\n            page: Optional Playwright page object.\n        \"\"\"\n        self.browser_config = browser_config\n        self.page: Optional[Page] = page",
        "detail": "autoppia_iwa.src.execution.browser_executor",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "peekOfCode": "class BrowserSnapshot(BaseModel):\n    \"\"\"\n    Represents a snapshot of the browser state before and after executing an action.\n    Captures HTML content, screenshots, backend events, and metadata.\n    \"\"\"\n    iteration: int = Field(..., description=\"The current iteration of the evaluation process\")\n    action: BaseAction = Field(..., description=\"The action that was executed\")\n    prev_html: str = Field(..., description=\"HTML content before actions were executed\")\n    current_html: str = Field(..., description=\"HTML content after actions were executed\")\n    screenshot_before: str = Field(..., description=\"Base64-encoded screenshot before actions\")",
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "kind": 6,
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "peekOfCode": "class ActionExecutionResult(BaseModel):\n    \"\"\"Log of the execution result of an action.\"\"\"\n    action: BaseAction = Field(..., description=\"The action that was executed\")\n    action_event: str = Field(..., description=\"Type of the action event (e.g., 'click', 'navigate', 'type')\")\n    successfully_executed: bool = Field(..., description=\"Indicates whether the action was executed successfully\")\n    error: Optional[str] = Field(None, description=\"Details of the error if the action failed\")\n    execution_time: Optional[float] = Field(None, description=\"Time taken to execute the action, in seconds\")\n    browser_snapshot: BrowserSnapshot = Field(..., description=\"Snapshot of the browser state after execution\")\n    def model_dump(self, *args, **kwargs):\n        base_dump = super().model_dump(*args, **kwargs)",
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "LLMConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "peekOfCode": "class LLMConfig:\n    \"\"\"Basic configuration for LLMs.\"\"\"\n    model: str = \"gpt-3.5-turbo\"\n    temperature: float = 0.7\n    max_tokens: int = 2048\nclass ILLM(ABC):\n    \"\"\"Minimal interface for LLM models with two methods.\"\"\"\n    @abstractmethod\n    def predict(self, messages: List[Dict[str, str]], json_format: bool = False, schema: Optional[Dict] = None) -> str:\n        \"\"\"",
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "peekOfCode": "class ILLM(ABC):\n    \"\"\"Minimal interface for LLM models with two methods.\"\"\"\n    @abstractmethod\n    def predict(self, messages: List[Dict[str, str]], json_format: bool = False, schema: Optional[Dict] = None) -> str:\n        \"\"\"\n        Synchronous inference call.\n        \"\"\"\n    @abstractmethod\n    async def async_predict(self, messages: List[Dict[str, str]], json_format: bool = False, schema: Optional[Dict] = None) -> str:\n        \"\"\"",
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "OpenAIUtilsMixin",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.domain.utils",
        "description": "autoppia_iwa.src.llms.domain.utils",
        "peekOfCode": "class OpenAIUtilsMixin:\n    @staticmethod\n    def num_tokens_from_string(string: str, model=\"gpt-3.5-turbo-0613\", disallowed_special=True) -> int:\n        \"\"\"Returns the number of tokens in a text string.\"\"\"\n        encoding = tiktoken.encoding_for_model(model)\n        if disallowed_special:\n            num_tokens = len(encoding.encode(string, disallowed_special=()))\n        else:\n            num_tokens = len(encoding.encode(string))\n        return num_tokens",
        "detail": "autoppia_iwa.src.llms.domain.utils",
        "documentation": {}
    },
    {
        "label": "OpenAIService",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "peekOfCode": "class OpenAIService(ILLM):\n    \"\"\"\n    Simple OpenAI-based LLM.\n    Uses OpenAI (sync) and AsyncOpenAI (async) clients.\n    \"\"\"\n    def __init__(self, config: LLMConfig, api_key: str):\n        self.config = config\n        self.sync_client = OpenAI(api_key=api_key)\n        self.async_client = AsyncOpenAI(api_key=api_key)\n    def _prepare_json_schema(self, schema: Dict) -> Dict:",
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "LocalLLMService",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "peekOfCode": "class LocalLLMService(ILLM):\n    \"\"\"\n    Simple local (self-hosted) LLM that communicates via HTTP.\n    Uses HTTPX for sync and async calls.\n    \"\"\"\n    def __init__(self, config: LLMConfig, endpoint_url: str, parallel_endpoint_url: Optional[str] = None):\n        \"\"\"\n        :param config: LLMConfig object with model details, max_tokens, temperature, etc.\n        :param endpoint_url: The HTTP endpoint for single-request generation (e.g. /generate).\n        :param parallel_endpoint_url: (Optional) The HTTP endpoint for batch generation (e.g. /generate_parallel).",
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "LLMFactory",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "peekOfCode": "class LLMFactory:\n    \"\"\"\n    Simple factory to build the right LLM implementation\n    based on the llm_type.\n    \"\"\"\n    @staticmethod\n    def create_llm(llm_type: str, config: LLMConfig, **kwargs) -> ILLM:\n        if llm_type.lower() == \"openai\":\n            return OpenAIService(config, api_key=kwargs.get(\"api_key\"))\n        elif llm_type.lower() == \"local\":",
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "OpenAIService",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service_parallel",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service_parallel",
        "peekOfCode": "class OpenAIService(ILLM):\n    \"\"\"\n    Simple OpenAI-based LLM.\n    Uses OpenAI (sync) and AsyncOpenAI (async) clients.\n    \"\"\"\n    def __init__(self, config: LLMConfig, api_key: str):\n        self.config = config\n        self.sync_client = OpenAI(api_key=api_key)\n        self.async_client = AsyncOpenAI(api_key=api_key)\n    def _prepare_json_schema(self, schema: Dict) -> Dict:",
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service_parallel",
        "documentation": {}
    },
    {
        "label": "LocalLLMService",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service_parallel",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service_parallel",
        "peekOfCode": "class LocalLLMService(ILLM):\n    \"\"\"\n    Simple local (self-hosted) LLM that communicates via HTTP.\n    Uses HTTPX for sync and async calls.\n    \"\"\"\n    def __init__(self, config: LLMConfig, endpoint_url: str, parallel_endpoint_url: Optional[str] = None):\n        \"\"\"\n        :param config: LLMConfig object with model details, max_tokens, temperature, etc.\n        :param endpoint_url: The HTTP endpoint for single-request generation (e.g. /generate).\n        :param parallel_endpoint_url: (Optional) The HTTP endpoint for batch generation (e.g. /generate_parallel).",
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service_parallel",
        "documentation": {}
    },
    {
        "label": "LLMFactory",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service_parallel",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service_parallel",
        "peekOfCode": "class LLMFactory:\n    \"\"\"\n    Simple factory to build the right LLM implementation\n    based on the llm_type.\n    \"\"\"\n    @staticmethod\n    def create_llm(llm_type: str, config: LLMConfig, **kwargs) -> ILLM:\n        if llm_type.lower() == \"openai\":\n            return OpenAIService(config, api_key=kwargs.get(\"api_key\"))\n        elif llm_type.lower() == \"local\":",
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service_parallel",
        "documentation": {}
    },
    {
        "label": "UIParserService",
        "kind": 6,
        "importPath": "autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "description": "autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "peekOfCode": "class UIParserService:\n    def __init__(self):\n        pass\n    def summarize_image(self, file):\n        return \"\"\n# class UIParserService:\n#     def __init__(self):\n#         pass\n#         device = 0 if torch.cuda.is_available() else -1\n#         self.ui_parser = pipeline(\"image-to-text\", model=\"microsoft/OmniParser-v2.0\", device=device)",
        "detail": "autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "kind": 6,
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "peekOfCode": "class BaseMongoRepository:\n    \"\"\"\n    A generic repository for performing CRUD operations on a MongoDB collection.\n    \"\"\"\n    def __init__(self, mongo_client: MongoClient, db_name: str, collection_name: str):\n        \"\"\"\n        Initialize the BaseMongoRepository.\n        Args:\n            mongo_client (MongoClient): The MongoDB client.\n            db_name (str): The name of the database.",
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "TimingMetrics",
        "kind": 6,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "peekOfCode": "class TimingMetrics:\n    \"\"\"Track timing metrics for tasks and agents.\"\"\"\n    def __init__(self):\n        self.start_time = None\n        self.end_time = None\n        # Structure: {agent_id: {task_id: float}} for solution & evaluation times\n        self.solution_times: Dict[str, Dict[str, float]] = {}\n        self.evaluation_times: Dict[str, Dict[str, float]] = {}\n    def start(self):\n        \"\"\"Start the overall timing.\"\"\"",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "documentation": {}
    },
    {
        "label": "compute_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "peekOfCode": "def compute_statistics(values: List[float]) -> dict:\n    \"\"\"\n    Compute basic statistics for a list of numeric values.\n    Returns:\n        dict: A dictionary with count, mean, median, min, max, stdev.\n    \"\"\"\n    if not values:\n        return {\n            \"count\": 0,\n            \"mean\": None,",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.metrics",
        "documentation": {}
    },
    {
        "label": "save_results_to_json",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "peekOfCode": "def save_results_to_json(results, agents, timing_metrics: TimingMetrics, output_dir: str) -> str:\n    \"\"\"\n    Save comprehensive results to a JSON file and return the file path.\n    \"\"\"\n    os.makedirs(output_dir, exist_ok=True)\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = os.path.join(output_dir, f\"stress_test_results_{timestamp}.json\")\n    output_data = {\"timestamp\": datetime.now().isoformat(), \"total_execution_time\": timing_metrics.get_total_time(), \"agents\": {}}\n    for agent in agents:\n        agent_scores = []",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "peekOfCode": "def print_performance_statistics(results, agents, timing_metrics: TimingMetrics):\n    \"\"\"\n    Print performance stats (scores, timings) for each agent.\n    \"\"\"\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    print(f\"\\n===== PERFORMANCE REPORT ({timestamp}) =====\")\n    total_time = timing_metrics.get_total_time()\n    print(f\"\\nTotal test execution time: {total_time:.2f} seconds\")\n    for agent in agents:\n        print(f\"\\n== Agent: {agent.name} ({agent.id}) ==\")",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_results",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "peekOfCode": "def plot_results(results, agents, timing_metrics: TimingMetrics, output_dir: str) -> str:\n    \"\"\"\n    Plot average score, solution time, and evaluation time for each agent.\n    Returns the path to the saved plot image.\n    \"\"\"\n    import statistics\n    os.makedirs(output_dir, exist_ok=True)\n    agent_names = [agent.name for agent in agents]\n    agent_ids = [agent.id for agent in agents]\n    avg_scores = []",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_task_comparison",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "peekOfCode": "def plot_task_comparison(results, agents, tasks, output_dir: str) -> str:\n    \"\"\"\n    Plot each agent's score on each task (up to 10 tasks).\n    Returns the path to the saved plot image.\n    \"\"\"\n    os.makedirs(output_dir, exist_ok=True)\n    max_tasks_to_show = min(10, len(tasks))\n    selected_tasks = tasks[:max_tasks_to_show]\n    fig, ax = plt.subplots(figsize=(12, 6))\n    bar_width = 0.35",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.results",
        "documentation": {}
    },
    {
        "label": "SolutionData",
        "kind": 6,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "peekOfCode": "class SolutionData(BaseModel):\n    \"\"\"Model for caching solution data\"\"\"\n    agent_id: str\n    agent_name: str\n    timestamp: float = Field(default_factory=time.time)\n    solution: TaskSolution\nclass TaskCache(RootModel):\n    \"\"\"Model for task cache entries\"\"\"\n    root: Dict[str, SolutionData] = {}\n    def __getitem__(self, key):",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "TaskCache",
        "kind": 6,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "peekOfCode": "class TaskCache(RootModel):\n    \"\"\"Model for task cache entries\"\"\"\n    root: Dict[str, SolutionData] = {}\n    def __getitem__(self, key):\n        return self.root[key]\n    def __setitem__(self, key, value):\n        self.root[key] = value\n    def __contains__(self, key):\n        return key in self.root\n    def keys(self):",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "SolutionsCache",
        "kind": 6,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "peekOfCode": "class SolutionsCache(RootModel):\n    \"\"\"Model for the entire solutions cache\"\"\"\n    root: Dict[str, TaskCache] = {}\n    def __getitem__(self, key):\n        return self.root[key]\n    def __setitem__(self, key, value):\n        self.root[key] = value\n    def __contains__(self, key):\n        return key in self.root\n    def keys(self):",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "ConsolidatedSolutionCache",
        "kind": 6,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "peekOfCode": "class ConsolidatedSolutionCache:\n    \"\"\"\n    Class to handle caching of task solutions in a single JSON file.\n    Uses Pydantic models for data validation and serialization.\n    \"\"\"\n    def __init__(self, cache_dir: str):\n        \"\"\"\n        Initialize the solution cache.\n        Args:\n            cache_dir: Directory where solution cache file will be stored",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SolutionData(BaseModel):\n    \"\"\"Model for caching solution data\"\"\"\n    agent_id: str\n    agent_name: str\n    timestamp: float = Field(default_factory=time.time)\n    solution: TaskSolution\nclass TaskCache(RootModel):\n    \"\"\"Model for task cache entries\"\"\"\n    root: Dict[str, SolutionData] = {}",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "get_cache_filename",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "description": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "peekOfCode": "def get_cache_filename(project: WebProject, task_cache_dir: str) -> str:\n    \"\"\"\n    Generate a project-specific cache filename based on the project's name or ID.\n    \"\"\"\n    safe_name = project.name.replace(\" \", \"_\").lower()\n    return os.path.join(task_cache_dir, f\"{safe_name}_tasks.json\")\nasync def save_tasks_to_json(tasks: List[Task], project: WebProject, task_cache_dir: str) -> bool:\n    \"\"\"\n    Save tasks to a project-specific JSON file.\n    \"\"\"",
        "detail": "autoppia_iwa.src.shared.utils_entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "print_task_screenshot_in_terminal",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.image_utils",
        "description": "autoppia_iwa.src.shared.image_utils",
        "peekOfCode": "def print_task_screenshot_in_terminal(task, width=80):\n    \"\"\"\n    Prints a Task's screenshot image in the terminal as simple ASCII art.\n    Args:\n        task (Task): The task containing a base64 encoded screenshot\n        width (int): Width of the ASCII art in characters. Defaults to 80.\n    Returns:\n        bool: True if successful, False if there was an error.\n    \"\"\"\n    if not task.screenshot:",
        "detail": "autoppia_iwa.src.shared.image_utils",
        "documentation": {}
    },
    {
        "label": "simple_ascii_art",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.image_utils",
        "description": "autoppia_iwa.src.shared.image_utils",
        "peekOfCode": "def simple_ascii_art(image, width=80):\n    \"\"\"Convert and print image as ASCII art with no terminal operations\"\"\"\n    try:\n        # Hard-coded safe width\n        width = min(width, 100)\n        # Calculate height with aspect ratio, with safety bounds\n        aspect_ratio = image.height / max(1, image.width)\n        height = max(1, int(width * aspect_ratio * 0.5))\n        # Resize and convert to grayscale safely\n        try:",
        "detail": "autoppia_iwa.src.shared.image_utils",
        "documentation": {}
    },
    {
        "label": "PromptImporter",
        "kind": 6,
        "importPath": "autoppia_iwa.src.shared.prompt_importer",
        "description": "autoppia_iwa.src.shared.prompt_importer",
        "peekOfCode": "class PromptImporter:\n    \"\"\"\n    Loads a prompt from a specified file path.\n    \"\"\"\n    def __init__(self, prompt_file_path: str):\n        self.prompt_file_path = prompt_file_path\n        self._prompt_content = self._load_prompt()\n    def _load_prompt(self) -> str:\n        if not os.path.exists(self.prompt_file_path):\n            raise FileNotFoundError(f\"Prompt file not found: {self.prompt_file_path}\")",
        "detail": "autoppia_iwa.src.shared.prompt_importer",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "peekOfCode": "def generate_random_web_agent_id(length: int = 16) -> str:\n    \"\"\"\n    Generates a random alphanumeric string for the web_agent ID.\n    \"\"\"\n    letters_and_digits = string.ascii_letters + string.digits\n    return \"\".join(random.choice(letters_and_digits) for _ in range(length))\ndef extract_json_in_markdown(text: str) -> str:\n    \"\"\"\n    Extract the first fenced code block (```json ... ``` or just ``` ... ```).\n    If none is found, return text.strip() as a fallback.",
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "extract_json_in_markdown",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "peekOfCode": "def extract_json_in_markdown(text: str) -> str:\n    \"\"\"\n    Extract the first fenced code block (```json ... ``` or just ``` ... ```).\n    If none is found, return text.strip() as a fallback.\n    \"\"\"\n    pattern = re.compile(r\"```(?:json)?\\s*(.*?)\\s*```\", re.DOTALL)\n    match = pattern.search(text)\n    if match:\n        return match.group(1).strip()\n    return text.strip()",
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "transform_image_into_base64",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "peekOfCode": "def transform_image_into_base64(image: Image.Image) -> str:\n    \"\"\"\n    Converts a PIL Image into a base64 encoded string.\n    Args:\n        image (Image.Image): The image to be converted.\n    Returns:\n        str: The base64 encoded string of the image.\n    \"\"\"\n    buffered = BytesIO()\n    image.save(buffered, format=\"PNG\")",
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "SubnetVisualizer",
        "kind": 6,
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "peekOfCode": "class SubnetVisualizer:\n    \"\"\"\n    Improved visualizer for Subnet 36, which displays:\n    1. The Task with its prompt\n    2. Associated Tests with detailed information\n    3. The Agent's Actions\n    4. Test results (✅/❌)\n    5. Scores\n    \"\"\"\n    def __init__(self, log_directory: Optional[str] = None):",
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_task",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "peekOfCode": "def visualize_task(visualizer):\n    \"\"\"Decorator to visualize a task and its tests.\"\"\"\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            result = await func(*args, **kwargs)\n            if isinstance(result, list):\n                for task in result:\n                    visualizer.show_task_with_tests(task)\n            else:\n                visualizer.show_task_with_tests(result)",
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_evaluation",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "peekOfCode": "def visualize_evaluation(visualizer):\n    \"\"\"Decorator to visualize an agent's evaluation.\"\"\"\n    def decorator(func):\n        async def wrapper(web_project, task, task_solution, *args, **kwargs):\n            result = await func(web_project, task, task_solution, *args, **kwargs)\n            # Changed from show_agent_evaluation to show_full_evaluation\n            visualizer.show_full_evaluation(\n                agent_id=task_solution.web_agent_id,\n                task=task,\n                actions=task_solution.actions,",
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_summary",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "peekOfCode": "def visualize_summary(visualizer):\n    \"\"\"Decorator to visualize the final summary.\"\"\"\n    def decorator(func):\n        def wrapper(results, agents, *args, **kwargs):\n            func(results, agents, *args, **kwargs)\n            visualizer.print_summary(results, agents)\n            return None\n        return wrapper\n    return decorator\ndef test_visualization():",
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "test_visualization",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "peekOfCode": "def test_visualization():\n    # Simplified classes for this example\n    class Task:\n        def __init__(self, id, prompt, tests):\n            self.id = id\n            self.prompt = prompt\n            self.tests = tests\n    class CheckUrlTest:\n        def __init__(self, type, url, description):\n            self.type = type",
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "sync_extract_html",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "peekOfCode": "def sync_extract_html(page_url: str) -> str:\n    \"\"\"\n    Uses Playwright in sync mode to extract HTML from a page.\n    Adjust if your environment doesn't support sync Playwright.\n    \"\"\"\n    from playwright.sync_api import sync_playwright\n    launch_options = {\"headless\": True, \"args\": [\"--start-maximized\"]}\n    with sync_playwright() as p:\n        browser_type = p.chromium\n        browser = browser_type.launch(**launch_options)",
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "clean_html",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "peekOfCode": "def clean_html(html_content: str) -> str:\n    \"\"\"\n    Removes scripts, styles, hidden tags, inline event handlers, etc.,\n    returning a 'clean' version of the DOM.\n    This version is exception resistant.\n    \"\"\"\n    try:\n        soup = BeautifulSoup(html_content, \"html.parser\")\n    except Exception:\n        return \"\"",
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "detect_interactive_elements",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "peekOfCode": "def detect_interactive_elements(cleaned_html: str) -> Dict[str, Any]:\n    \"\"\"\n    Inspects the cleaned HTML to find possible interactive elements:\n      - forms (with their inputs)\n      - buttons or anchors with text\n      - textareas, selects, etc.\n    Returns a dict summarizing them for LLM usage, e.g.:\n    {\n      \"forms\": [\n        {\"fields\": [\"name\", \"email\", \"message\"]}",
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "TaskData",
        "kind": 6,
        "importPath": "autoppia_iwa.src.shared.web_voyager_utils",
        "description": "autoppia_iwa.src.shared.web_voyager_utils",
        "peekOfCode": "class TaskData(BaseModel):\n    \"\"\"Data model for tasks.\"\"\"\n    id: str\n    web: str\n    ques: str\n    web_name: str\ndef setup_logging() -> None:\n    \"\"\"Set up logging configuration.\"\"\"\n    logging.basicConfig(format=\"[%(levelname)s]: %(message)s\", level=logging.INFO, handlers=[logging.StreamHandler()])\ndef load_jsonl_file(file_path: Path) -> List[Dict]:",
        "detail": "autoppia_iwa.src.shared.web_voyager_utils",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.web_voyager_utils",
        "description": "autoppia_iwa.src.shared.web_voyager_utils",
        "peekOfCode": "def setup_logging() -> None:\n    \"\"\"Set up logging configuration.\"\"\"\n    logging.basicConfig(format=\"[%(levelname)s]: %(message)s\", level=logging.INFO, handlers=[logging.StreamHandler()])\ndef load_jsonl_file(file_path: Path) -> List[Dict]:\n    \"\"\"Load tasks from a JSONL file.\"\"\"\n    if not file_path.exists():\n        logging.warning(f\"File {file_path} not found.\")\n        return []\n    tasks = []\n    try:",
        "detail": "autoppia_iwa.src.shared.web_voyager_utils",
        "documentation": {}
    },
    {
        "label": "load_jsonl_file",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.web_voyager_utils",
        "description": "autoppia_iwa.src.shared.web_voyager_utils",
        "peekOfCode": "def load_jsonl_file(file_path: Path) -> List[Dict]:\n    \"\"\"Load tasks from a JSONL file.\"\"\"\n    if not file_path.exists():\n        logging.warning(f\"File {file_path} not found.\")\n        return []\n    tasks = []\n    try:\n        with file_path.open(\"r\", encoding=\"utf-8\") as f:\n            if file_path.suffix == \".json\":\n                return json.load(f)",
        "detail": "autoppia_iwa.src.shared.web_voyager_utils",
        "documentation": {}
    },
    {
        "label": "load_real_tasks",
        "kind": 2,
        "importPath": "autoppia_iwa.src.shared.web_voyager_utils",
        "description": "autoppia_iwa.src.shared.web_voyager_utils",
        "peekOfCode": "def load_real_tasks(num_of_urls: int) -> List[TaskData]:\n    \"\"\"Load real tasks, excluding impossible ones.\"\"\"\n    data_dir = PROJECT_BASE_DIR.parent / \"data\"\n    print(\"Loading real tasks...\")\n    original_tasks = load_jsonl_file(data_dir / \"web_voyager_tasks/web_voyager_data.jsonl\")\n    impossible_tasks_ids = set(load_jsonl_file(data_dir / \"web_voyager_tasks/web_voyager_impossible_tasks.json\"))\n    return [TaskData(**task) for task in original_tasks if task[\"id\"] not in impossible_tasks_ids][:num_of_urls]",
        "detail": "autoppia_iwa.src.shared.web_voyager_utils",
        "documentation": {}
    },
    {
        "label": "MyCustomApifiedWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_agents.custom_apified_agent.agent",
        "description": "autoppia_iwa.src.web_agents.custom_apified_agent.agent",
        "peekOfCode": "class MyCustomApifiedWebAgent(ApifiedWebAgent):\n    def __init__(self, name: str, host: str, port: int):\n        super().__init__(name, host, port)",
        "detail": "autoppia_iwa.src.web_agents.custom_apified_agent.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "peekOfCode": "class RandomClickerWebAgent(BaseAgent):\n    \"\"\"\n    Web Agent that executes random actions within the screen dimensions.\n    \"\"\"\n    def __init__(self, name=\"Random clicker\", is_random: bool = True):\n        super().__init__(name=name)\n        self.is_random = is_random\n    async def solve_task(self, task: Task) -> TaskSolution:\n        \"\"\"\n        Generates a list of random click actions within the screen dimensions.",
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "peekOfCode": "class ApifiedWebAgent(IWebAgent):\n    \"\"\"\n    Calls a remote /solve_task endpoint and rebuilds a TaskSolution.\n    \"\"\"\n    def __init__(self, host: str, port: int, id: str | None = None, name: str | None = None, timeout=180):\n        self.id = id or generate_random_web_agent_id()\n        self.name = name or f\"Agent {self.id}\"\n        self.base_url = f\"http://{host}:{port}\"\n        self.timeout = timeout\n        super().__init__()",
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "IWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "peekOfCode": "class IWebAgent(ABC):\n    \"\"\"\n    The design allows for multiple web agents to implement this interface, ensuring standardized inputs and behaviors across different agents.\n    Every web agent that implements this interface must define the required methods and properties, ensuring consistency and compatibility.\n    Example:\n    - An 'Autopilot Web Agent' would implement this interface, adhering to the standardized inputs and outputs specified here.\n    The goal is to provide a common structure that all web agents will follow, facilitating integration and interoperability among them.\n    \"\"\"\n    id: str\n    name: str",
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "peekOfCode": "class BaseAgent(IWebAgent):\n    def __init__(self, name=None):\n        self.id = self.generate_random_web_agent_id()\n        self.name = name if name is not None else f\"Agent {self.id}\"\n    def generate_random_web_agent_id(self, length=16):\n        \"\"\"Generates a random alphanumeric string for the web_agent ID.\"\"\"\n        letters_and_digits = string.ascii_letters + string.digits\n        return ''.join(random.choice(letters_and_digits) for _ in range(length))",
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "peekOfCode": "class TaskSolution(BaseModel):\n    task_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description=\"Unique identifier for the task, auto-generated using UUID4\")\n    actions: List[BaseAction] = Field(default_factory=list)\n    web_agent_id: Optional[str] = None\n    def nested_model_dump(self, *args, **kwargs) -> str:\n        base_dump = super().model_dump(*args, **kwargs)\n        base_dump[\"actions\"] = [action.model_dump() for action in self.actions]\n        return base_dump",
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "peekOfCode": "class WebAnalysisPipeline:\n    def __init__(\n        self,\n        start_url: str,\n        analysis_repository: BaseMongoRepository = Provide[DIContainer.analysis_repository],\n        llm_service: ILLM = Provide[DIContainer.llm_service],\n    ):\n        self.start_url = start_url\n        self.domain = urlparse(start_url).netloc\n        self.llm_service = llm_service",
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "MAX_TOKENS_ELEMENT_ANALYZER",
        "kind": 5,
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "peekOfCode": "MAX_TOKENS_ELEMENT_ANALYZER = LLM_CONTEXT_WINDOW\nclass WebAnalysisPipeline:\n    def __init__(\n        self,\n        start_url: str,\n        analysis_repository: BaseMongoRepository = Provide[DIContainer.analysis_repository],\n        llm_service: ILLM = Provide[DIContainer.llm_service],\n    ):\n        self.start_url = start_url\n        self.domain = urlparse(start_url).netloc",
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebCrawler",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "description": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "peekOfCode": "class WebCrawler:\n    \"\"\"\n    A web crawler that crawls URLs starting from a given start URL.\n    Args:\n        start_url (str): The URL to start crawling from.\n    Attributes:\n        domain (str): The domain of the start URL.\n    \"\"\"\n    def __init__(self, crawler_config: WebCrawlerConfig):\n        parsed = urlparse(crawler_config.start_url)",
        "detail": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "documentation": {}
    },
    {
        "label": "WebLLMAnalyzer",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "description": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "peekOfCode": "class WebLLMAnalyzer:\n    def __init__(self, llm_service: ILLM = Provide[DIContainer.llm_service]):\n        \"\"\"\n        Initialize the web page structure extractor with a start URL.\n        Args:\n            llm_service (ILLM): the model to extract data from.\n        \"\"\"\n        self.llm_service: ILLM = llm_service\n    def analyze_element(self, element: Element) -> LLMWebAnalysis:\n        template = PromptLLMTemplate.get_instance_from_file(",
        "detail": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "documentation": {}
    },
    {
        "label": "CONVERT_RESPONSE_TO_JSON_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "description": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "peekOfCode": "CONVERT_RESPONSE_TO_JSON_PROMPT = \"\"\"\nYou are an expert JSON content reviewer tasked with analyzing the given RAW JSON/Unstructured\n segment of a webpage and providing a strictly valid JSON-formatted analysis.\nImportant Requirements:\n- Return only one JSON object (no arrays, no multiple objects).\n- The output must be valid JSON that can be directly parsed by `json.loads` without modification.\n- Use double quotes for all keys and string values.\n- Do not include trailing commas.\n- Do not include any text or explanation outside of the JSON object.\n- If something is not relevant, omit it entirely rather than returning empty lists or objects.",
        "detail": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "documentation": {}
    },
    {
        "label": "WebPageStructureExtractor",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "description": "autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "peekOfCode": "class WebPageStructureExtractor:\n    \"\"\"\n    A web page structure extractor that extracts structured data from web pages.\n    \"\"\"\n    ALLOWED_HTML_TAGS = [\n        \"header\",\n        \"nav\",\n        \"main\",\n        \"section\",\n        \"article\",",
        "detail": "autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "documentation": {}
    },
    {
        "label": "LLMWebAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "peekOfCode": "class LLMWebAnalysis(BaseModel):\n    one_phrase_summary: str\n    summary: str\n    categories: List[str]\n    functionality: List[str]\n    media_files_description: Optional[Union[str, List[Dict[str, Any]], List[str]]] = None\n    key_words: List[str]\n    relevant_fields: Optional[List[Union[str, Dict[str, Union[str, Any]]]]] = None\n    curiosities: Optional[str] = None\n    accessibility: Optional[Union[str, List[str]]] = None",
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "SinglePageAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "peekOfCode": "class SinglePageAnalysis(BaseModel):\n    page_url: str\n    elements_analysis_result: List[Dict]\n    web_summary: LLMWebAnalysis\n    html_source: str\nclass DomainAnalysis(BaseModel):\n    domain: str\n    status: str\n    page_analyses: List[SinglePageAnalysis]\n    started_time: str",
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "peekOfCode": "class DomainAnalysis(BaseModel):\n    domain: str\n    status: str\n    page_analyses: List[SinglePageAnalysis]\n    started_time: str\n    ended_time: str\n    total_time: float\n    start_url: str\n    category: str = \"\"\n    features: List[str] = Field(default_factory=list, description=\"List of features\")",
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "EventTriggered",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "peekOfCode": "class EventTriggered:\n    type: str\n    def to_dict(self):\n        field_names = [f.name for f in fields(self)]\n        d = {k: getattr(self, k) for k in field_names}\n        return d\n@dataclass\nclass Element:\n    tag: str\n    attributes: Dict[str, str]",
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "Element",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "peekOfCode": "class Element:\n    tag: str\n    attributes: Dict[str, str]\n    textContent: str\n    children: List[\"Element\"] = field(default_factory=list)\n    id: Optional[str] = None\n    element_id: Optional[int] = None\n    parent_element_id: Optional[int] = None\n    path: Optional[str] = None\n    events_triggered: List[EventTriggered] = field(default_factory=list)",
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "peekOfCode": "class WebCrawlerConfig(BaseModel):\n    start_url: str\n    max_depth: int = 2",
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "PromptLLMTemplate",
        "kind": 6,
        "importPath": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "description": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "peekOfCode": "class PromptLLMTemplate:\n    def __init__(self, template: str, variables: list = None, values: dict = None, schema: dict = None):\n        \"\"\"\n        Initializes the PromptLLMTemplate.\n        Args:\n            template (str): The text template containing variables in the format ${variable}.\n            variables (list): Optional list of variables present in the template.\n            values (dict): Optional dictionary of values to replace the variables.\n            schema (dict): Optional JSON schema for validation of values.\n        \"\"\"",
        "detail": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "kind": 6,
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "peekOfCode": "class AppBootstrap:\n    \"\"\"\n    In charge of initializing Dependency Injection\n    \"\"\"\n    def __init__(self):\n        self.configure_dependency_injection()\n    def configure_dependency_injection(self):\n        self.container = DIContainer()",
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "kind": 6,
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "peekOfCode": "class DIContainer(containers.DeclarativeContainer):\n    \"\"\"Dependency Injection Container.\"\"\"\n    # Configuration\n    config = providers.Configuration()\n    wiring_config = containers.WiringConfiguration(packages=[\"autoppia_iwa.src\"])\n    # Initialize MongoDB client as Singleton\n    mongo_client = providers.Singleton(lambda: MongoClient(MONGODB_URL))\n    # Repository of analysis results as Factory\n    analysis_repository = providers.Factory(\n        BaseMongoRepository,",
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "send_request",
        "kind": 2,
        "importPath": "modules.llm_local.test.stress_test",
        "description": "modules.llm_local.test.stress_test",
        "peekOfCode": "def send_request(url, request_data, request_id):\n    \"\"\"\n    Sends a single request to the given URL with the JSON payload.\n    Returns a tuple: (request_id, success_bool, response_time, error_message, response_text)\n      - request_id: identifier of the request\n      - success_bool: True if the request got a 200 and the output is presumably valid\n      - response_time: how many seconds the request took\n      - error_message: a string describing any error encountered (or None if success_bool is True)\n      - response_text: the 'output' field from the JSON response if present\n    \"\"\"",
        "detail": "modules.llm_local.test.stress_test",
        "documentation": {}
    },
    {
        "label": "generate_random_request",
        "kind": 2,
        "importPath": "modules.llm_local.test.stress_test",
        "description": "modules.llm_local.test.stress_test",
        "peekOfCode": "def generate_random_request():\n    \"\"\"\n    Picks one of the EXAMPLE_REQUESTS at random.\n    Could be extended to randomize temperature/max_tokens, etc.\n    \"\"\"\n    base = random.choice(EXAMPLE_REQUESTS)\n    # Create a shallow copy so as not to mutate the original example\n    data = dict(base)\n    # Slight random variations on temperature or max_tokens if desired\n    data[\"temperature\"] = round(random.uniform(0.1, 1.0), 2)",
        "detail": "modules.llm_local.test.stress_test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "modules.llm_local.test.stress_test",
        "description": "modules.llm_local.test.stress_test",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"Stress test a Qwen inference endpoint.\")\n    parser.add_argument(\"--url\", type=str, default=\"http://localhost:6000/generate\", help=\"Full URL of the /generate endpoint.\")\n    parser.add_argument(\"--concurrency\", type=int, default=5, help=\"Number of concurrent threads.\")\n    parser.add_argument(\"--total_requests\", type=int, default=20, help=\"Total number of requests to send.\")\n    args = parser.parse_args()\n    url = args.url\n    concurrency = args.concurrency\n    total_requests = args.total_requests\n    print(f\"== Starting Stress Test ==\\n\" f\"Endpoint: {url}\\n\" f\"Concurrency: {concurrency}\\n\" f\"Total requests: {total_requests}\\n\")",
        "detail": "modules.llm_local.test.stress_test",
        "documentation": {}
    },
    {
        "label": "summarize_results",
        "kind": 2,
        "importPath": "modules.llm_local.test.stress_test",
        "description": "modules.llm_local.test.stress_test",
        "peekOfCode": "def summarize_results(results):\n    \"\"\"\n    Prints a summary of test outcomes, including average time, success/failure counts, etc.\n    \"\"\"\n    total = len(results)\n    failures = [r for r in results if not r[1]]\n    successes = [r for r in results if r[1]]\n    avg_time = sum(r[2] for r in results) / total if total > 0 else 0.0\n    print(\"\\n=== Test Summary ===\")\n    print(f\"Total Requests: {total}\")",
        "detail": "modules.llm_local.test.stress_test",
        "documentation": {}
    },
    {
        "label": "EXAMPLE_REQUESTS",
        "kind": 5,
        "importPath": "modules.llm_local.test.stress_test",
        "description": "modules.llm_local.test.stress_test",
        "peekOfCode": "EXAMPLE_REQUESTS = [\n    # Simple request: short question\n    {\n        \"messages\": [{\"role\": \"system\", \"content\": \"You are Qwen, created by Alibaba Cloud. You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"What is the capital of France?\"}],\n        \"temperature\": 0.1,\n        \"max_tokens\": 128,\n    },\n    # JSON-format request with a schema (somewhat simpler)\n    {\n        \"messages\": [",
        "detail": "modules.llm_local.test.stress_test",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "modules.llm_local.test.test_one_request",
        "description": "modules.llm_local.test.test_one_request",
        "peekOfCode": "def make_request():\n    url = \"http://194.68.245.61:22185/generate\"\n    headers = {\"Content-Type\": \"application/json\"}\n    # Instead of putting everything under \"input\": {...},\n    # we send messages/temperature/max_tokens at the top level.\n    data = {\n        \"messages\": [\n            {\"role\": \"system\", \"content\": \"You are Qwen, created by Alibaba Cloud. You are a helpful assistant.\"},\n            {\"role\": \"user\", \"content\": \"Give me a short introduction to large language model.\"},\n        ],",
        "detail": "modules.llm_local.test.test_one_request",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "modules.llm_local.test.test_one_request_large",
        "description": "modules.llm_local.test.test_one_request_large",
        "peekOfCode": "def make_request():\n    url = \"http://194.68.245.61:22185/generate\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = {\n        \"request_number\": 381,\n        \"timestamp\": 1740840474.1822062,\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": (",
        "detail": "modules.llm_local.test.test_one_request_large",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "modules.llm_local.test.test_one_request_speed",
        "description": "modules.llm_local.test.test_one_request_speed",
        "peekOfCode": "def make_request():\n    url = \"http://127.0.0.1:22185/generate\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = {\n        \"messages\": [\n            {\"role\": \"system\", \"content\": \"You are Qwen, created by Alibaba Cloud. You are a helpful assistant.\"},\n            {\"role\": \"user\", \"content\": \"Give me a short introduction to large language model.\"},\n        ],\n        \"temperature\": 0.1,\n        \"max_tokens\": 256,",
        "detail": "modules.llm_local.test.test_one_request_speed",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "modules.llm_local.test.test_one_request_speed",
        "description": "modules.llm_local.test.test_one_request_speed",
        "peekOfCode": "def main():\n    for i in range(1, 1001):\n        req_time, result = make_request()\n        print(f\"Request {i} - {req_time:.2f}s\")\n        # Optionally print the LLM output\n        print(\"Output:\", result.get(\"output\", \"No output found\"), \"\\n\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "modules.llm_local.test.test_one_request_speed",
        "documentation": {}
    },
    {
        "label": "make_parallel_request",
        "kind": 2,
        "importPath": "modules.llm_local.test.test_parallel_request",
        "description": "modules.llm_local.test.test_parallel_request",
        "peekOfCode": "def make_parallel_request(N=5):\n    \"\"\"\n    Sends a batch of N sub-requests to the /generate_parallel endpoint.\n    Each sub-request has its own set of messages.\n    \"\"\"\n    url = \"http://127.0.0.1:6000/generate_parallel\"\n    headers = {\"Content-Type\": \"application/json\"}\n    # Build the \"requests\" array with N copies (or variations) of the messages\n    requests_list = []\n    for i in range(N):",
        "detail": "modules.llm_local.test.test_parallel_request",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "modules.llm_local.test.test_parallel_request",
        "description": "modules.llm_local.test.test_parallel_request",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"Test parallel requests to /generate_parallel.\")\n    parser.add_argument(\"--number_request\", type=int, default=5, help=\"Number of sub-requests to batch in one call\")\n    args = parser.parse_args()\n    # Number of sub-requests to batch in one call\n    N = args.number_request\n    elapsed, result = make_parallel_request(N)\n    print(f\"Parallel request with {N} sub-requests took {elapsed:.2f}s\\n\")\n    print(\"Full result:\")\n    print(json.dumps(result, indent=2))",
        "detail": "modules.llm_local.test.test_parallel_request",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "modules.llm_local.run_local_blip2",
        "description": "modules.llm_local.run_local_blip2",
        "peekOfCode": "def main():\n    # 1. Parse command-line arguments\n    parser = argparse.ArgumentParser(description=\"Use BLIP-2 to classify screenshot content.\")\n    parser.add_argument(\"--filename\", required=True, help=\"Path to the screenshot image file.\")\n    args = parser.parse_args()\n    # 2. Load the BLIP-2 model and processor\n    processor = Blip2Processor.from_pretrained(\"Salesforce/blip2-opt-2.7b\")\n    model = Blip2ForConditionalGeneration.from_pretrained(\"Salesforce/blip2-opt-2.7b\")\n    # 3. Load your screenshot\n    image = Image.open(args.filename).convert(\"RGB\")",
        "detail": "modules.llm_local.run_local_blip2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "modules.llm_local.run_local_clip",
        "description": "modules.llm_local.run_local_clip",
        "peekOfCode": "def main():\n    # 1. Parse command-line arguments\n    parser = argparse.ArgumentParser(description=\"Use CLIP to classify screenshot content.\")\n    parser.add_argument(\"--filename\", required=True, help=\"Path to the screenshot image file.\")\n    parser.add_argument(\"--model_name\", default=\"openai/clip-vit-large-patch14\", help=\"Name of the CLIP-like model on the Hugging Face Hub.\")\n    args = parser.parse_args()\n    # 2. Load the specified CLIP model and processor\n    model = CLIPModel.from_pretrained(args.model_name)\n    processor = CLIPProcessor.from_pretrained(args.model_name)\n    # 3. Load your screenshot",
        "detail": "modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "append_to_file",
        "kind": 2,
        "importPath": "modules.llm_local.run_local_llm",
        "description": "modules.llm_local.run_local_llm",
        "peekOfCode": "def append_to_file(filepath, data_obj):\n    \"\"\"\n    Append a single JSON object to a file as a new line.\n    \"\"\"\n    with open(filepath, 'a', encoding='utf-8') as f:\n        json.dump(data_obj, f, ensure_ascii=False)\n        f.write(\"\\n\")\ndef generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters.",
        "detail": "modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "generate_data",
        "kind": 2,
        "importPath": "modules.llm_local.run_local_llm",
        "description": "modules.llm_local.run_local_llm",
        "peekOfCode": "def generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters.\n    If json_format=True, attempts to repair and return valid JSON.\n    If schema is provided, instruct the model to strictly follow it.\n    Returns (response_text, tokens_in, tokens_out, text_prompt).\n    \"\"\"\n    text_prompt = None\n    try:\n        # If we have a JSON schema, prepend an instruction to produce valid JSON",
        "detail": "modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "modules.llm_local.run_local_llm",
        "description": "modules.llm_local.run_local_llm",
        "peekOfCode": "def handler():\n    # Ensure only one request is processed at a time\n    with lock:\n        counters[\"total_requests\"] += 1\n        request_number = counters[\"total_requests\"]\n        # Prepare a dict to record everything about the request (and eventually response)\n        log_data = {\"request_number\": request_number, \"timestamp\": time.time()}  # Or use time.ctime() if you want a human-readable string\n        try:\n            data = request.json or {}\n            # Extract the fields",
        "detail": "modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm",
        "description": "modules.llm_local.run_local_llm",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n# A global lock to ensure only one request is processed at a time.\nlock = threading.Lock()\nMODEL_NAME = \"Qwen/Qwen2.5-14B-Instruct\"\n# Load tokenizer & model\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(MODEL_NAME, torch_dtype=\"auto\", device_map={\"\": 0})\nmodel.eval()\n# Global counters (optional)",
        "detail": "modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm",
        "description": "modules.llm_local.run_local_llm",
        "peekOfCode": "lock = threading.Lock()\nMODEL_NAME = \"Qwen/Qwen2.5-14B-Instruct\"\n# Load tokenizer & model\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(MODEL_NAME, torch_dtype=\"auto\", device_map={\"\": 0})\nmodel.eval()\n# Global counters (optional)\ncounters = {\"total_requests\": 0, \"json_requests\": 0, \"json_correctly_formatted\": 0, \"json_repair_succeeded\": 0}\ndef append_to_file(filepath, data_obj):\n    \"\"\"",
        "detail": "modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "MODEL_NAME",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm",
        "description": "modules.llm_local.run_local_llm",
        "peekOfCode": "MODEL_NAME = \"Qwen/Qwen2.5-14B-Instruct\"\n# Load tokenizer & model\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(MODEL_NAME, torch_dtype=\"auto\", device_map={\"\": 0})\nmodel.eval()\n# Global counters (optional)\ncounters = {\"total_requests\": 0, \"json_requests\": 0, \"json_correctly_formatted\": 0, \"json_repair_succeeded\": 0}\ndef append_to_file(filepath, data_obj):\n    \"\"\"\n    Append a single JSON object to a file as a new line.",
        "detail": "modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm",
        "description": "modules.llm_local.run_local_llm",
        "peekOfCode": "tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(MODEL_NAME, torch_dtype=\"auto\", device_map={\"\": 0})\nmodel.eval()\n# Global counters (optional)\ncounters = {\"total_requests\": 0, \"json_requests\": 0, \"json_correctly_formatted\": 0, \"json_repair_succeeded\": 0}\ndef append_to_file(filepath, data_obj):\n    \"\"\"\n    Append a single JSON object to a file as a new line.\n    \"\"\"\n    with open(filepath, 'a', encoding='utf-8') as f:",
        "detail": "modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm",
        "description": "modules.llm_local.run_local_llm",
        "peekOfCode": "model = AutoModelForCausalLM.from_pretrained(MODEL_NAME, torch_dtype=\"auto\", device_map={\"\": 0})\nmodel.eval()\n# Global counters (optional)\ncounters = {\"total_requests\": 0, \"json_requests\": 0, \"json_correctly_formatted\": 0, \"json_repair_succeeded\": 0}\ndef append_to_file(filepath, data_obj):\n    \"\"\"\n    Append a single JSON object to a file as a new line.\n    \"\"\"\n    with open(filepath, 'a', encoding='utf-8') as f:\n        json.dump(data_obj, f, ensure_ascii=False)",
        "detail": "modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "counters",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm",
        "description": "modules.llm_local.run_local_llm",
        "peekOfCode": "counters = {\"total_requests\": 0, \"json_requests\": 0, \"json_correctly_formatted\": 0, \"json_repair_succeeded\": 0}\ndef append_to_file(filepath, data_obj):\n    \"\"\"\n    Append a single JSON object to a file as a new line.\n    \"\"\"\n    with open(filepath, 'a', encoding='utf-8') as f:\n        json.dump(data_obj, f, ensure_ascii=False)\n        f.write(\"\\n\")\ndef generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"",
        "detail": "modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "generate_data",
        "kind": 2,
        "importPath": "modules.llm_local.run_local_llm_parallel",
        "description": "modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "def generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters (single sequence).\n    If json_format=True, attempts to repair and return valid JSON.\n    If schema is provided, instruct the model to follow it strictly.\n    Returns (response_text, tokens_in, tokens_out).\n    \"\"\"\n    try:\n        # If we have a JSON schema, prepend an instruction to produce valid JSON\n        if json_format and schema:",
        "detail": "modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "generate_data_batch",
        "kind": 2,
        "importPath": "modules.llm_local.run_local_llm_parallel",
        "description": "modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "def generate_data_batch(requests, temperature, max_tokens):\n    \"\"\"\n    Generate text for multiple conversation \"requests\" in *one* batch.\n    Each element of `requests` is expected to be a dict containing:\n      - \"messages\": list of messages\n      - optionally \"json_format\": bool\n      - optionally \"schema\": dict\n    Returns:\n      outputs (list of response_texts),\n      total_tokens_in (int),",
        "detail": "modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "modules.llm_local.run_local_llm_parallel",
        "description": "modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "def handler():\n    \"\"\"\n    Single-request endpoint: processes exactly one list-of-messages.\n    \"\"\"\n    counters[\"total_requests\"] += 1\n    request_number = counters[\"total_requests\"]\n    try:\n        data = request.json or {}\n        messages = data.get(\"messages\", [])\n        temperature = float(data.get(\"temperature\", 0.1))",
        "detail": "modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "handler_parallel",
        "kind": 2,
        "importPath": "modules.llm_local.run_local_llm_parallel",
        "description": "modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "def handler_parallel():\n    \"\"\"\n    Batch-request endpoint: can process multiple sets of messages (requests) in one shot.\n    This is useful to compare throughput (tokens/second) vs many single requests.\n    Expected JSON format:\n    {\n      \"requests\": [\n        {\"messages\": [...], \"json_format\": false, \"schema\": null},\n        {\"messages\": [...], \"json_format\": true,  \"schema\": {...}},\n        ...",
        "detail": "modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm_parallel",
        "description": "modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n# ---------------------------------------------------------------------------\n# The model name as per Qwen docs (Adjust if you prefer Qwen2-7B-Instruct, etc.)\n# ---------------------------------------------------------------------------\nMODEL_NAME = \"Qwen/Qwen2.5-14B-Instruct\"\n# Load tokenizer & model\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(MODEL_NAME, torch_dtype=\"auto\", device_map=\"auto\")\nmodel.eval()",
        "detail": "modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "MODEL_NAME",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm_parallel",
        "description": "modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "MODEL_NAME = \"Qwen/Qwen2.5-14B-Instruct\"\n# Load tokenizer & model\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(MODEL_NAME, torch_dtype=\"auto\", device_map=\"auto\")\nmodel.eval()\n# ---------------------------------------------------------------------------\n# Global counters (optional)\n# ---------------------------------------------------------------------------\ncounters = {\"total_requests\": 0, \"json_requests\": 0, \"json_correctly_formatted\": 0, \"json_repair_succeeded\": 0}\ndef generate_data(messages, temperature, max_tokens, json_format=False, schema=None):",
        "detail": "modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm_parallel",
        "description": "modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(MODEL_NAME, torch_dtype=\"auto\", device_map=\"auto\")\nmodel.eval()\n# ---------------------------------------------------------------------------\n# Global counters (optional)\n# ---------------------------------------------------------------------------\ncounters = {\"total_requests\": 0, \"json_requests\": 0, \"json_correctly_formatted\": 0, \"json_repair_succeeded\": 0}\ndef generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters (single sequence).",
        "detail": "modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm_parallel",
        "description": "modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "model = AutoModelForCausalLM.from_pretrained(MODEL_NAME, torch_dtype=\"auto\", device_map=\"auto\")\nmodel.eval()\n# ---------------------------------------------------------------------------\n# Global counters (optional)\n# ---------------------------------------------------------------------------\ncounters = {\"total_requests\": 0, \"json_requests\": 0, \"json_correctly_formatted\": 0, \"json_repair_succeeded\": 0}\ndef generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters (single sequence).\n    If json_format=True, attempts to repair and return valid JSON.",
        "detail": "modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "counters",
        "kind": 5,
        "importPath": "modules.llm_local.run_local_llm_parallel",
        "description": "modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "counters = {\"total_requests\": 0, \"json_requests\": 0, \"json_correctly_formatted\": 0, \"json_repair_succeeded\": 0}\ndef generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters (single sequence).\n    If json_format=True, attempts to repair and return valid JSON.\n    If schema is provided, instruct the model to follow it strictly.\n    Returns (response_text, tokens_in, tokens_out).\n    \"\"\"\n    try:\n        # If we have a JSON schema, prepend an instruction to produce valid JSON",
        "detail": "modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.admin.management.commands.reset_db",
        "description": "modules.webs_demo.web_1_demo_movies.admin.management.commands.reset_db",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Reset the database and seed it with initial data'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--force',\n            action='store_true',\n            help='Force reset without confirmation',\n        )\n    def handle(self, *args, **options):\n        if not options['force']:",
        "detail": "modules.webs_demo.web_1_demo_movies.admin.management.commands.reset_db",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.admin.management.commands.seed_movies",
        "description": "modules.webs_demo.web_1_demo_movies.admin.management.commands.seed_movies",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Resets ALL tables and then seeds the database with initial movies, genres, and comments\"\n    def handle(self, *args, **options):\n        self.stdout.write(self.style.SUCCESS(\"Starting to seed the database...\"))\n        all_models = apps.get_models()  \n        for model in all_models:\n            model.objects.all().delete()\n        self.stdout.write(self.style.SUCCESS(\"All tables have been reset (all records deleted).\"))\n        # Create genres\n        genres_to_create = [",
        "detail": "modules.webs_demo.web_1_demo_movies.admin.management.commands.seed_movies",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.admin.management.commands.seed_users",
        "description": "modules.webs_demo.web_1_demo_movies.admin.management.commands.seed_users",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Create multiple test users with profiles (from user1 to user255)'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--start',\n            type=int,\n            default=1,\n            help='Starting user number (default: 1)'\n        )\n        parser.add_argument(",
        "detail": "modules.webs_demo.web_1_demo_movies.admin.management.commands.seed_users",
        "documentation": {}
    },
    {
        "label": "EventsConfig",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.admin.apps",
        "description": "modules.webs_demo.web_1_demo_movies.admin.apps",
        "peekOfCode": "class EventsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"admin\"",
        "detail": "modules.webs_demo.web_1_demo_movies.admin.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.admin.urls",
        "description": "modules.webs_demo.web_1_demo_movies.admin.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/reset_db/', reset_database, name='reset_database'),\n]",
        "detail": "modules.webs_demo.web_1_demo_movies.admin.urls",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.admin.views",
        "description": "modules.webs_demo.web_1_demo_movies.admin.views",
        "peekOfCode": "def reset_database(request):\n    \"\"\"\n    API endpoint to reset and reseed the database.\n    Only available in development mode for security.\n    \"\"\"\n    # Security check: Only allow in development\n    if not settings.DEBUG:\n        return JsonResponse({\n            'status': 'error',\n            'message': 'This endpoint is only available in development mode'",
        "detail": "modules.webs_demo.web_1_demo_movies.admin.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.migrations.0001_initial",
        "description": "modules.webs_demo.web_1_demo_movies.events.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "modules.webs_demo.web_1_demo_movies.events.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.migrations.0002_alter_event_event_name",
        "description": "modules.webs_demo.web_1_demo_movies.events.migrations.0002_alter_event_event_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('events', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='event',\n            name='event_name',\n            field=models.CharField(choices=[('FILM_DETAIL', 'Film Detail View'), ('SEARCH', 'Search Performed'), ('REGISTRATION', 'User Registration'), ('LOGIN', 'User Login'), ('LOGOUT', 'User lOGOUT')], max_length=50),\n        ),",
        "detail": "modules.webs_demo.web_1_demo_movies.events.migrations.0002_alter_event_event_name",
        "documentation": {}
    },
    {
        "label": "EventsConfig",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.apps",
        "description": "modules.webs_demo.web_1_demo_movies.events.apps",
        "peekOfCode": "class EventsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"events\"",
        "detail": "modules.webs_demo.web_1_demo_movies.events.apps",
        "documentation": {}
    },
    {
        "label": "EventName",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.models",
        "description": "modules.webs_demo.web_1_demo_movies.events.models",
        "peekOfCode": "class EventName(models.TextChoices):\n    FILM_DETAIL = 'FILM_DETAIL', 'Film Detail View'\n    SEARCH_FILM = 'SEARCH_FILM', 'Search Film'\n    ADD_FILM = 'ADD_FILM', 'Add Film'\n    EDIT_FILM = 'EDIT_FILM', 'Edit Film'\n    DELETE_FILM = 'DELETE_FILM', 'Delete Film'\n    ADD_COMMENT = 'ADD_COMMENT', 'Add Comment'\n    REGISTRATION = 'REGISTRATION', 'User Registration'\n    LOGIN = 'LOGIN', 'User Login'\n    LOGOUT = 'LOGOUT', 'User Logout'",
        "detail": "modules.webs_demo.web_1_demo_movies.events.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.models",
        "description": "modules.webs_demo.web_1_demo_movies.events.models",
        "peekOfCode": "class Event(models.Model):\n    \"\"\"\n    Modelo para almacenar distintos tipos de eventos\n    relacionados con películas y acciones de usuario.\n    \"\"\"\n    # Campos básicos comunes a todos los eventos\n    event_name = models.CharField(max_length=50, choices=EventName.choices)\n    timestamp = models.DateTimeField(default=timezone.now)\n    web_agent_id = models.IntegerField()\n    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)",
        "detail": "modules.webs_demo.web_1_demo_movies.events.models",
        "documentation": {}
    },
    {
        "label": "EventSerializer",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.serializers",
        "description": "modules.webs_demo.web_1_demo_movies.events.serializers",
        "peekOfCode": "class EventSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Event\n        fields = '__all__'",
        "detail": "modules.webs_demo.web_1_demo_movies.events.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.urls",
        "description": "modules.webs_demo.web_1_demo_movies.events.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"events/list/\", get_events, name=\"event-list\"),\n    path(\"events/my/\", my_events, name=\"my_events\"),\n    path(\"events/reset/\", reset_events, name=\"reset_events\"),\n    path(\"events/reset/all/\", reset_all_events, name=\"reset_all_events\"),\n    path(\"events/add/\", add_event, name=\"add_events\"),\n]",
        "detail": "modules.webs_demo.web_1_demo_movies.events.urls",
        "documentation": {}
    },
    {
        "label": "create_event",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.utils",
        "description": "modules.webs_demo.web_1_demo_movies.events.utils",
        "peekOfCode": "def create_event(user, event_type, description, data=None, web_agent_id=None):\n    \"\"\"\n    Create an event in the database.\n    Args:\n        user (User): The user associated with the event (can be None).\n        event_type (str): The type of the event (must be one of Event.EVENT_TYPES).\n        description (str): A brief description of the event.\n        data (dict): Additional data to store with the event.\n    \"\"\"\n    Event.objects.create(",
        "detail": "modules.webs_demo.web_1_demo_movies.events.utils",
        "documentation": {}
    },
    {
        "label": "get_events",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.views",
        "description": "modules.webs_demo.web_1_demo_movies.events.views",
        "peekOfCode": "def get_events(request):\n    \"\"\"\n    Fetch events for the web_agent identified by the provided `X-WebAgent-Id` header.\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    events = Event.objects.filter(web_agent_id=web_agent_id).order_by(\"-timestamp\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)",
        "detail": "modules.webs_demo.web_1_demo_movies.events.views",
        "documentation": {}
    },
    {
        "label": "my_events",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.views",
        "description": "modules.webs_demo.web_1_demo_movies.events.views",
        "peekOfCode": "def my_events(request):\n    \"\"\"\n    Get all events, ordered by timestamp (newest first).\n    \"\"\"\n    events = Event.objects.order_by(\"-timestamp\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)\n@api_view([\"DELETE\"])\ndef reset_events(request):\n    \"\"\"",
        "detail": "modules.webs_demo.web_1_demo_movies.events.views",
        "documentation": {}
    },
    {
        "label": "reset_events",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.views",
        "description": "modules.webs_demo.web_1_demo_movies.events.views",
        "peekOfCode": "def reset_events(request):\n    \"\"\"\n    Delete events for a specific web_agent_id provided in the X-WebAgent-Id header.\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    count = Event.objects.filter(web_agent_id=web_agent_id).count()\n    Event.objects.filter(web_agent_id=web_agent_id).delete()\n    return Response(",
        "detail": "modules.webs_demo.web_1_demo_movies.events.views",
        "documentation": {}
    },
    {
        "label": "reset_all_events",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.views",
        "description": "modules.webs_demo.web_1_demo_movies.events.views",
        "peekOfCode": "def reset_all_events(request):\n    \"\"\"\n    Delete all events in the database.\n    Requires admin/staff privileges.\n    \"\"\"\n    count = Event.objects.count()\n    Event.objects.all().delete()\n    return Response(\n        {\"message\": f\"All events have been deleted successfully ({count} events).\"},\n        status=status.HTTP_200_OK,",
        "detail": "modules.webs_demo.web_1_demo_movies.events.views",
        "documentation": {}
    },
    {
        "label": "add_event",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.events.views",
        "description": "modules.webs_demo.web_1_demo_movies.events.views",
        "peekOfCode": "def add_event(request):\n    \"\"\"\n    Add a new event to the database.\n    Expected JSON payload formats:\n    For FilmDetailEvent:\n    {\n        \"event_name\": \"FILM_DETAIL\",\n        \"web_agent_id\": \"agent123\",\n        \"user_id\": 1,  # Optional\n        \"data\": {",
        "detail": "modules.webs_demo.web_1_demo_movies.events.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.migrations.0001_initial",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ContactMessage',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "peekOfCode": "def split(value, arg):\n    \"\"\"Split a string into a list based on a delimiter\"\"\"\n    return value.split(arg)\n@register.filter\ndef modulo(value, arg):\n    \"\"\"Returns the remainder of value divided by arg\"\"\"\n    return int(value) % int(arg)\n@register.filter\ndef lower(value):\n    \"\"\"Convert a string to lowercase\"\"\"",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "modulo",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "peekOfCode": "def modulo(value, arg):\n    \"\"\"Returns the remainder of value divided by arg\"\"\"\n    return int(value) % int(arg)\n@register.filter\ndef lower(value):\n    \"\"\"Convert a string to lowercase\"\"\"\n    if isinstance(value, str):\n        return value.lower()\n    elif isinstance(value, list):\n        return [item.lower() if isinstance(item, str) else item for item in value]",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "peekOfCode": "def lower(value):\n    \"\"\"Convert a string to lowercase\"\"\"\n    if isinstance(value, str):\n        return value.lower()\n    elif isinstance(value, list):\n        return [item.lower() if isinstance(item, str) else item for item in value]\n    return value",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef split(value, arg):\n    \"\"\"Split a string into a list based on a delimiter\"\"\"\n    return value.split(arg)\n@register.filter\ndef modulo(value, arg):\n    \"\"\"Returns the remainder of value divided by arg\"\"\"\n    return int(value) % int(arg)\n@register.filter",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "ContactMessageAdmin",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.admin",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.admin",
        "peekOfCode": "class ContactMessageAdmin(admin.ModelAdmin):\n    list_display = ('name', 'email', 'subject', 'created_at')\n    list_filter = ('created_at',)\n    search_fields = ('name', 'email', 'subject', 'message')\n    date_hierarchy = 'created_at'\n    ordering = ('-created_at',)",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.admin",
        "documentation": {}
    },
    {
        "label": "MovieappConfig",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.apps",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.apps",
        "peekOfCode": "class MovieappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'movieapp'",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.apps",
        "documentation": {}
    },
    {
        "label": "MovieForm",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "peekOfCode": "class MovieForm(forms.ModelForm):\n    class Meta:\n        model = Movie\n        fields = ['name', 'desc', 'year', 'img', 'director', 'cast', 'duration', 'trailer_url', 'rating', 'genres']\n        widgets = {\n            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter the movie name'}),\n            'desc': forms.Textarea(attrs={'class': 'form-control', 'rows': 4, 'placeholder': 'Write a synopsis or description of the movie'}),\n            'year': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Release year', 'min': 1900, 'max': 2025}),\n            'director': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Director\\'s name'}),\n            'cast': forms.Textarea(attrs={'class': 'form-control', 'rows': 2, 'placeholder': 'Main actors separated by commas'}),",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "documentation": {}
    },
    {
        "label": "CommentForm",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "peekOfCode": "class CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['name', 'content']\n        widgets = {\n            'name': forms.TextInput(attrs={\n                'class': 'form-control', \n                'placeholder': 'Your name',\n                'required': True\n            }),",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "documentation": {}
    },
    {
        "label": "CustomLoginForm",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "peekOfCode": "class CustomLoginForm(AuthenticationForm):\n    username = forms.CharField(\n        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Username'})\n    )\n    password = forms.CharField(\n        widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Password'})\n    )\n# Custom registration form with Bootstrap styling\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "documentation": {}
    },
    {
        "label": "SignUpForm",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "peekOfCode": "class SignUpForm(UserCreationForm):\n    email = forms.EmailField(\n        max_length=254,\n        help_text='Required. Enter a valid email address.',\n        widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Email'})\n    )\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'password1', 'password2')\n    def __init__(self, *args, **kwargs):",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "documentation": {}
    },
    {
        "label": "UserProfileForm",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "peekOfCode": "class UserProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = ['bio', 'profile_pic', 'favorite_genres', 'website', 'location']\n        widgets = {\n            'bio': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'placeholder': 'Tell us about yourself'}),\n            'profile_pic': forms.FileInput(attrs={'class': 'custom-file-input'}),\n            'favorite_genres': forms.SelectMultiple(attrs={'class': 'form-control'}),\n            'website': forms.URLInput(attrs={'class': 'form-control', 'placeholder': 'Your website URL'}),\n            'location': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Your location'}),",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "documentation": {}
    },
    {
        "label": "UserForm",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "peekOfCode": "class UserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email']\n        widgets = {\n            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'First Name'}),\n            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Last Name'}),\n            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Email'}),\n        }\n# Formulario de contacto - Agregar al archivo forms.py existente",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "peekOfCode": "class ContactForm(forms.Form):\n    name = forms.CharField(\n        max_length=100,\n        widget=forms.TextInput(attrs={\n            'class': 'form-control',\n            'placeholder': 'Your name'\n        })\n    )\n    email = forms.EmailField(\n        widget=forms.EmailInput(attrs={",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.forms",
        "documentation": {}
    },
    {
        "label": "Genre",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "peekOfCode": "class Genre(models.Model):\n    name = models.CharField(max_length=100)\n    def __str__(self):\n        return self.name\nclass Movie(models.Model):\n    name = models.CharField(max_length=250)\n    desc = models.TextField()\n    year = models.IntegerField(validators=[MinValueValidator(1900), MaxValueValidator(2100)])\n    img = models.ImageField(upload_to='gallery')\n    director = models.CharField(max_length=250, blank=True, null=True)",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "peekOfCode": "class Movie(models.Model):\n    name = models.CharField(max_length=250)\n    desc = models.TextField()\n    year = models.IntegerField(validators=[MinValueValidator(1900), MaxValueValidator(2100)])\n    img = models.ImageField(upload_to='gallery')\n    director = models.CharField(max_length=250, blank=True, null=True)\n    cast = models.TextField(blank=True, null=True, help_text=\"Names of actors separated by commas\")\n    duration = models.IntegerField(blank=True, null=True, help_text=\"Duration in minutes\")\n    trailer_url = models.URLField(blank=True, null=True)\n    rating = models.FloatField(",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "peekOfCode": "class Comment(models.Model):\n    movie = models.ForeignKey(Movie, on_delete=models.CASCADE, related_name='comments')\n    name = models.CharField(max_length=100)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    avatar = models.ImageField(upload_to='gallery/avatars', blank=True, null=True)\n    class Meta:\n        ordering = ['-created_at']\n    def __str__(self):\n        return f\"Comment by {self.name} on {self.movie.name}\"",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "peekOfCode": "class UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    bio = models.TextField(max_length=500, blank=True, null=True)\n    profile_pic = models.ImageField(upload_to='gallery/profiles', blank=True, null=True)\n    favorite_genres = models.ManyToManyField(Genre, blank=True, related_name=\"user_favorites\")\n    website = models.URLField(blank=True, null=True)\n    location = models.CharField(max_length=100, blank=True, null=True)\n    def __str__(self):\n        return f\"{self.user.username}'s profile\"\n# Signals para crear/guardar perfiles automáticamente",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "documentation": {}
    },
    {
        "label": "ContactMessage",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "peekOfCode": "class ContactMessage(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=200)\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        ordering = ['-created_at']\n    def __str__(self):\n        return f\"Message from {self.name}: {self.subject[:30]}\"",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "documentation": {}
    },
    {
        "label": "create_user_profile",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "peekOfCode": "def create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\nclass ContactMessage(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=200)",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "documentation": {}
    },
    {
        "label": "save_user_profile",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "peekOfCode": "def save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\nclass ContactMessage(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=200)\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        ordering = ['-created_at']",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.urls",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.urls",
        "peekOfCode": "app_name = 'movieapp'\nurlpatterns = [\n    # Main view\n    path('', views.index, name='index'),\n    # Movie details\n    path('movie/<int:movie_id>/', views.detail, name='detail'),\n    # CRUD operations for movies\n    path('add/', views.add_movie, name='add_movie'),\n    path('update/<int:id>', views.update_movie, name='update'),\n    path('delete/<int:id>', views.delete_movie, name='delete'),",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.urls",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.urls",
        "peekOfCode": "urlpatterns = [\n    # Main view\n    path('', views.index, name='index'),\n    # Movie details\n    path('movie/<int:movie_id>/', views.detail, name='detail'),\n    # CRUD operations for movies\n    path('add/', views.add_movie, name='add_movie'),\n    path('update/<int:id>', views.update_movie, name='update'),\n    path('delete/<int:id>', views.delete_movie, name='delete'),\n    # Genre pages",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def index(request):\n    \"\"\"\n    Vista principal que muestra la lista de películas con opciones de búsqueda y filtrado.\n    \"\"\"\n    # Obtener todos los géneros para el dropdown de filtro\n    all_genres = Genre.objects.all().order_by('name')\n    # Obtener años disponibles para el filtro\n    available_years = Movie.objects.values_list('year', flat=True).distinct().order_by('-year')\n    # Obtener parámetros de búsqueda y filtro\n    search_query = request.GET.get('search', '')",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def about(request):\n    \"\"\"Vista de la página \"Acerca de\".\"\"\"\n    return render(request, 'about.html')\n# =============================================================================\n#                            VISTAS DE PELÍCULAS\n# =============================================================================\ndef detail(request, movie_id):\n    \"\"\"\n    Vista de detalle de película: muestra información, películas relacionadas y comentarios.\n    Además, registra el evento de visualización de detalle.",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "detail",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def detail(request, movie_id):\n    \"\"\"\n    Vista de detalle de película: muestra información, películas relacionadas y comentarios.\n    Además, registra el evento de visualización de detalle.\n    \"\"\"\n    movie = get_object_or_404(Movie, id=movie_id)\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\", 0)\n    # Registrar evento de detalle de película\n    detail_event = Event.create_film_detail_event(\n        request.user if request.user.is_authenticated else None,",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "add_movie",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def add_movie(request):\n    \"\"\"\n    Vista para agregar una nueva película y registrar el evento de ADD_FILM.\n    \"\"\"\n    if request.method == \"POST\":\n        form = MovieForm(request.POST, request.FILES)\n        if form.is_valid():\n            movie = form.save()\n            add_film_event = Event.create_add_film_event(\n                user=request.user if request.user.is_authenticated else None,",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "update_movie",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def update_movie(request, id):\n    \"\"\"\n    Vista para actualizar una película existente.\n    Registra el evento de EDIT_FILM si se detectan cambios.\n    \"\"\"\n    movie = get_object_or_404(Movie, id=id)\n    original_values = {\n        'name': movie.name,\n        'desc': movie.desc,\n        'year': movie.year,",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "delete_movie",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def delete_movie(request, id):\n    \"\"\"\n    Vista para eliminar una película y registrar el evento de DELETE_FILM.\n    \"\"\"\n    movie = get_object_or_404(Movie, id=id)\n    if request.method == 'POST':\n        delete_film_event = Event.create_delete_film_event(\n            user=request.user if request.user.is_authenticated else None,\n            web_agent_id=request.headers.get('X-WebAgent-Id', '0'),\n            movie=movie",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "add_comment",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def add_comment(request, movie_id):\n    \"\"\"\n    Vista para agregar un comentario a una película.\n    Registra el evento de añadir comentario y, si la solicitud es AJAX, devuelve una respuesta JSON.\n    \"\"\"\n    movie = get_object_or_404(Movie, id=movie_id)\n    if request.method == 'POST':\n        name = request.POST.get('name', '')\n        if request.user.is_authenticated:\n            name = request.user.username",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "genre_list",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def genre_list(request):\n    \"\"\"\n    Vista que muestra la lista de géneros.\n    \"\"\"\n    genres = Genre.objects.all()\n    return render(request, 'genres.html', {'genres': genres})\ndef genre_detail(request, genre_id):\n    \"\"\"\n    Vista que muestra los detalles de un género y las películas asociadas.\n    \"\"\"",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "genre_detail",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def genre_detail(request, genre_id):\n    \"\"\"\n    Vista que muestra los detalles de un género y las películas asociadas.\n    \"\"\"\n    genre = get_object_or_404(Genre, id=genre_id)\n    movies = Movie.objects.filter(genres=genre)\n    context = {\n        'genre': genre,\n        'movies': movies\n    }",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def contact(request):\n    \"\"\"\n    Vista de contacto: guarda el mensaje en la base de datos y crea un evento.\n    \"\"\"\n    if request.method == 'POST':\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            name = form.cleaned_data['name']\n            email = form.cleaned_data['email']\n            subject = form.cleaned_data['subject']",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def login_view(request):\n    \"\"\"\n    Vista para iniciar sesión.\n    Si el usuario ya está autenticado, redirige a la página principal.\n    \"\"\"\n    if request.user.is_authenticated:\n        return redirect('movieapp:index')\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        password = request.POST.get('password')",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def logout_view(request):\n    \"\"\"\n    Vista para cerrar sesión.\n    Registra el evento de cierre de sesión antes de finalizar la sesión.\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\", 0)\n    logout_event = Event.create_logout_event(request.user, web_agent_id)\n    logout(request)\n    logout_event.save()\n    messages.success(request, 'You have been logged out successfully.')",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "register_view",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def register_view(request):\n    \"\"\"\n    Vista para registrar un nuevo usuario.\n    Valida la información, crea el usuario, registra los eventos de registro e inicio de sesión y redirige a la página principal.\n    \"\"\"\n    if request.user.is_authenticated:\n        return redirect('movieapp:index')\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        email = request.POST.get('email')",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "profile_view",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "description": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "peekOfCode": "def profile_view(request):\n    \"\"\"\n    Vista para mostrar y actualizar el perfil del usuario.\n    Permite actualizar datos personales, email, imagen y géneros favoritos.\n    \"\"\"\n    user = request.user\n    try:\n        profile = user.profile\n    except UserProfile.DoesNotExist:\n        profile = UserProfile.objects.create(user=user)",
        "detail": "modules.webs_demo.web_1_demo_movies.movieapp.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.asgi",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-_r^nsyw@&+qjw7)m1*0yzt2_+wg+l5_66_k(2dl(%1)e$2r8r6'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['0.0.0.0','localhost']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-_r^nsyw@&+qjw7)m1*0yzt2_+wg+l5_66_k(2dl(%1)e$2r8r6'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['0.0.0.0','localhost']\n# Application definition\nINSTALLED_APPS = [\n    'movieapp',\n    'admin',\n    'events',\n    'django.contrib.admin',",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['0.0.0.0','localhost']\n# Application definition\nINSTALLED_APPS = [\n    'movieapp',\n    'admin',\n    'events',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['0.0.0.0','localhost']\n# Application definition\nINSTALLED_APPS = [\n    'movieapp',\n    'admin',\n    'events',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'movieapp',\n    'admin',\n    'events',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'movieproject.urls'",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "ROOT_URLCONF = 'movieproject.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "WSGI_APPLICATION = 'movieproject.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.sqlite3',\n#         'NAME': BASE_DIR / 'db.sqlite3',\n#     }\n# }\nDATABASES = {",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web3_movies\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"postgres\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n        \"OPTIONS\": {\n            \"isolation_level\": 1,  # 1 = READ COMMITTED",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR,'assets')\nMEDIA_URL = '/media/'",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR,'assets')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR,'assets')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\n# Default primary key field type",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR,'assets')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR,'assets')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR,'assets')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR,'assets')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.urls",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"movieapp.urls\")),\n    path('', include(\"events.urls\")),\n    path('', include(\"admin.urls\")),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.STATIC_URL,\n                          document_root=settings.STATIC_ROOT)\n    urlpatterns += static(settings.MEDIA_URL,",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.movieproject.wsgi",
        "description": "modules.webs_demo.web_1_demo_movies.movieproject.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "modules.webs_demo.web_1_demo_movies.movieproject.wsgi",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "class Event(BaseModel):\n    \"\"\"Base event class for all event types\"\"\"\n    type: str\n    timestamp: int\n    web_agent_id: int\n    user_id: Optional[int] = None\n    class ValidationCriteria(BaseModel):\n        pass\n    def validate(self) -> bool:\n        \"\"\"Check if this event meets the validation criteria\"\"\"",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "FilmDetailEvent",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "class FilmDetailEvent(Event):\n    \"\"\"Event triggered when a film detail page is viewed\"\"\"\n    movie: Movie\n    class ValidationCriteria(BaseModel):\n        \"\"\"Validation criteria for FilmDetailEvent\"\"\"\n        title: Optional[str] = None\n        genre: Optional[str] = None\n        director: Optional[str] = None\n        year: Optional[int] = None\n        class Config:",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "SearchEvent",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "class SearchEvent(Event):\n    \"\"\"Event triggered when a search is performed\"\"\"\n    query: str\n    class ValidationCriteria(Event.ValidationCriteria):\n        \"\"\"Validation criteria for SearchEvent\"\"\"\n        query: Optional[str] = None\n        class Config:\n            title = \"Search Validation\"\n            description = \"Validates that a search was performed with specific query\"\n    def validate(self, criteria: ValidationCriteria) -> bool:",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "RegistrationEvent",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "class RegistrationEvent(Event):\n    \"\"\"Event triggered when a user registration is completed\"\"\"\n    # No additional validation needed, just check the event type\nclass LoginEvent(Event):\n    \"\"\"Event triggered when a user logs in\"\"\"\n    username: str\n    # No additional validation needed, just check the event type\n# ================ Available Events and Use Cases ================\nEVENTS = [FilmDetailEvent, SearchEvent, RegistrationEvent, LoginEvent]\nUSE_CASES = [",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "LoginEvent",
        "kind": 6,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "class LoginEvent(Event):\n    \"\"\"Event triggered when a user logs in\"\"\"\n    username: str\n    # No additional validation needed, just check the event type\n# ================ Available Events and Use Cases ================\nEVENTS = [FilmDetailEvent, SearchEvent, RegistrationEvent, LoginEvent]\nUSE_CASES = [\n    {\n        \"name\": \"Registration\",\n        \"prompt_template\": \"Fill registration form and register\",",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "generate_random_movie_instance",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "def generate_random_movie_instance():\n    \"\"\"Generate a random movie instance for testing\"\"\"\n    return Movie(\n        id=faker.random_number(),\n        title=faker.catch_phrase(),\n        genre=faker.word(),\n        director=faker.name(),\n        release_year=int(faker.year())\n    )\ndef generate_random_instance(model_class: Type[Any]) -> Any:",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "generate_random_instance",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "def generate_random_instance(model_class: Type[Any]) -> Any:\n    \"\"\"Generates a random instance of the specified model class\"\"\"\n    model_name = model_class.__name__\n    generator = MODEL_GENERATION_MAP.get(model_name)\n    if not generator:\n        raise ValueError(f\"No generator defined for model {model_name}\")\n    instance_data = generator(faker)\n    return model_class(**instance_data)\ndef model_to_schema(model_class: Any) -> Dict[str, str]:\n    \"\"\"Extracts schema (field names and types) from a model class for event validation\"\"\"",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "model_to_schema",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "def model_to_schema(model_class: Any) -> Dict[str, str]:\n    \"\"\"Extracts schema (field names and types) from a model class for event validation\"\"\"\n    return {field: field_type.__name__ for field, field_type in model_class.__annotations__.items()}",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "MODELS = [Genre, Movie, Comment, UserProfile, ContactMessage]\n# ================ Event Classes with Nested Validation Criteria ================\nclass Event(BaseModel):\n    \"\"\"Base event class for all event types\"\"\"\n    type: str\n    timestamp: int\n    web_agent_id: int\n    user_id: Optional[int] = None\n    class ValidationCriteria(BaseModel):\n        pass",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "EVENTS",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "EVENTS = [FilmDetailEvent, SearchEvent, RegistrationEvent, LoginEvent]\nUSE_CASES = [\n    {\n        \"name\": \"Registration\",\n        \"prompt_template\": \"Fill registration form and register\",\n        \"event\": RegistrationEvent,\n        \"success_criteria\": \"Task is successful if the user is actually registered\",\n        \"tests\": [\n            {\n                \"type\": \"CheckEventTest\", ",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "USE_CASES",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "USE_CASES = [\n    {\n        \"name\": \"Registration\",\n        \"prompt_template\": \"Fill registration form and register\",\n        \"event\": RegistrationEvent,\n        \"success_criteria\": \"Task is successful if the user is actually registered\",\n        \"tests\": [\n            {\n                \"type\": \"CheckEventTest\", \n                \"event_name\": \"RegistrationEvent\",",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "RELEVANT_DATA",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "RELEVANT_DATA = {\n    \"User for Login\": {\n        \"email\": \"admin@moviesapp.com\",\n        \"password\": \"admin123\"\n    },\n    \"User for Registration\": {\n        \"email\": \"new-user@moviesapp.com\",\n        \"password\": \"admin123\"\n    }\n}",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "faker",
        "kind": 5,
        "importPath": "modules.webs_demo.web_1_demo_movies.export",
        "description": "modules.webs_demo.web_1_demo_movies.export",
        "peekOfCode": "faker = Faker()\nMODEL_GENERATION_MAP: Dict[str, Any] = {\n    \"Genre\": lambda faker: {\"name\": faker.word()},\n    \"Movie\": lambda faker: {\n        \"id\": faker.random_number(digits=6),\n        \"title\": faker.catch_phrase(),\n        \"genre\": faker.word(),\n        \"director\": faker.name(),\n        \"release_year\": int(faker.year())\n    },",
        "detail": "modules.webs_demo.web_1_demo_movies.export",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "modules.webs_demo.web_1_demo_movies.manage",
        "description": "modules.webs_demo.web_1_demo_movies.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'movieproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "modules.webs_demo.web_1_demo_movies.manage",
        "documentation": {}
    },
    {
        "label": "TestTaskGenerationPipeline",
        "kind": 6,
        "importPath": "tests.data_generation.test_complete_task_generation_pipeline",
        "description": "tests.data_generation.test_complete_task_generation_pipeline",
        "peekOfCode": "class TestTaskGenerationPipeline(unittest.IsolatedAsyncioTestCase):\n    \"\"\"\n    Unit tests for the TaskGenerationPipeline.\n    Ensures the pipeline generates structured tasks based on the provided input.\n    \"\"\"\n    async def asyncSetUp(self) -> None:\n        \"\"\"\n        Set up the environment and dependencies for each test.\n        \"\"\"\n        self.app_bootstrap = AppBootstrap()",
        "detail": "tests.data_generation.test_complete_task_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TestTaskPromptGenerator",
        "kind": 6,
        "importPath": "tests.data_generation.test_prompt_generator",
        "description": "tests.data_generation.test_prompt_generator",
        "peekOfCode": "class TestTaskPromptGenerator(unittest.IsolatedAsyncioTestCase):\n    \"\"\"Unit tests for TaskPromptGenerator.\"\"\"\n    async def asyncSetUp(self):\n        \"\"\"Set up test dependencies for each test.\"\"\"\n        self.app_bootstrap = AppBootstrap()\n        self.llm_service = self.app_bootstrap.container.llm_service()\n    async def test_generate_prompts_for_url(self):\n        \"\"\"Test the generation of prompts for a URL.\"\"\"\n        try:\n            # Initialize demo web project and set relevant data",
        "detail": "tests.data_generation.test_prompt_generator",
        "documentation": {}
    },
    {
        "label": "START_URL",
        "kind": 5,
        "importPath": "tests.data_generation.test_prompt_generator",
        "description": "tests.data_generation.test_prompt_generator",
        "peekOfCode": "START_URL = \"http://localhost:8000/login\"\nRELEVANT_DATA = {\"authorization\": {'email': 'employee@employee.com', 'password': 'employee'}}\nclass TestTaskPromptGenerator(unittest.IsolatedAsyncioTestCase):\n    \"\"\"Unit tests for TaskPromptGenerator.\"\"\"\n    async def asyncSetUp(self):\n        \"\"\"Set up test dependencies for each test.\"\"\"\n        self.app_bootstrap = AppBootstrap()\n        self.llm_service = self.app_bootstrap.container.llm_service()\n    async def test_generate_prompts_for_url(self):\n        \"\"\"Test the generation of prompts for a URL.\"\"\"",
        "detail": "tests.data_generation.test_prompt_generator",
        "documentation": {}
    },
    {
        "label": "RELEVANT_DATA",
        "kind": 5,
        "importPath": "tests.data_generation.test_prompt_generator",
        "description": "tests.data_generation.test_prompt_generator",
        "peekOfCode": "RELEVANT_DATA = {\"authorization\": {'email': 'employee@employee.com', 'password': 'employee'}}\nclass TestTaskPromptGenerator(unittest.IsolatedAsyncioTestCase):\n    \"\"\"Unit tests for TaskPromptGenerator.\"\"\"\n    async def asyncSetUp(self):\n        \"\"\"Set up test dependencies for each test.\"\"\"\n        self.app_bootstrap = AppBootstrap()\n        self.llm_service = self.app_bootstrap.container.llm_service()\n    async def test_generate_prompts_for_url(self):\n        \"\"\"Test the generation of prompts for a URL.\"\"\"\n        try:",
        "detail": "tests.data_generation.test_prompt_generator",
        "documentation": {}
    },
    {
        "label": "TestTaskTestGenerationWithWebAnalysis",
        "kind": 6,
        "importPath": "tests.data_generation.test_tests_generator",
        "description": "tests.data_generation.test_tests_generator",
        "peekOfCode": "class TestTaskTestGenerationWithWebAnalysis(unittest.IsolatedAsyncioTestCase):\n    async def asyncSetUp(self) -> None:\n        \"\"\"Initialize test environment.\"\"\"\n        self.app_bootstrap = AppBootstrap()\n        self.llm_service = self.app_bootstrap.container.llm_service()\n    async def _generate_tests_for_web_project(self, url: str) -> List[Task]:\n        \"\"\"Helper method to generate tasks and test cases.\"\"\"\n        web_project = await initialize_demo_webs_projects()\n        tasks = await generate_tasks_for_project(web_project[0])\n        test_generator = LocalTestGenerationPipeline(web_project=web_project[0], llm_service=self.llm_service)",
        "detail": "tests.data_generation.test_tests_generator",
        "documentation": {}
    },
    {
        "label": "TASKS_CACHE_DIR",
        "kind": 5,
        "importPath": "tests.data_generation.test_tests_generator",
        "description": "tests.data_generation.test_tests_generator",
        "peekOfCode": "TASKS_CACHE_DIR = PROJECT_BASE_DIR.parent / \"tests/jobs_demo_website_tasks.json\"\nUSE_CACHED_TASKS: bool = True\nNUMBER_OF_TASKS: int = 3\nNUM_OF_URLS: int = 3\nRANDOM_URLS: bool = False\n# ============================================================\n# TASK CACHING FUNCTIONS\n# ============================================================\nasync def load_tasks_from_json() -> Optional[List[Task]]:\n    \"\"\"",
        "detail": "tests.data_generation.test_tests_generator",
        "documentation": {}
    },
    {
        "label": "TestActionExecution",
        "kind": 6,
        "importPath": "tests.evaluation.test_evaluator_actions",
        "description": "tests.evaluation.test_evaluator_actions",
        "peekOfCode": "class TestActionExecution(unittest.IsolatedAsyncioTestCase):\n    \"\"\"\n    Unit test for evaluating task execution and action processing.\n    \"\"\"\n    async def asyncSetUp(self):\n        \"\"\"\n        Class-level setup that initializes the application bootstrap and task/action data.\n        \"\"\"\n        self.app_bootstrap = AppBootstrap()\n        self.task = self.create_task()",
        "detail": "tests.evaluation.test_evaluator_actions",
        "documentation": {}
    },
    {
        "label": "UIParserService",
        "kind": 6,
        "importPath": "tests.llms.ui_parser",
        "description": "tests.llms.ui_parser",
        "peekOfCode": "class UIParserService:\n    def __init__(self):\n        device = 0 if torch.cuda.is_available() else -1\n        self.ui_parser = pipeline(\"image-to-text\", model=\"microsoft/OmniParser-v2.0\", device=device)\n    def summarize_image(self, image: Image.Image) -> str:\n        try:\n            result = self.ui_parser(image)\n            if result and len(result) > 0:\n                return result[0].get(\"generated_text\", \"\")\n        except Exception as e:",
        "detail": "tests.llms.ui_parser",
        "documentation": {}
    },
    {
        "label": "TestActionsGeneration",
        "kind": 6,
        "importPath": "tests.test_actions_generation.test_actions_generation_pipeline",
        "description": "tests.test_actions_generation.test_actions_generation_pipeline",
        "peekOfCode": "class TestActionsGeneration(unittest.IsolatedAsyncioTestCase):\n    \"\"\"\n    Unit tests for generating new actions based on task configurations.\n    \"\"\"\n    async def asyncSetUp(self):\n        \"\"\"\n        Set up shared resources for all tests in the class.\n        \"\"\"\n        # Initialize the application bootstrap and LLM service\n        self.app_bootstrap = AppBootstrap()",
        "detail": "tests.test_actions_generation.test_actions_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "load_tasks_from_json",
        "kind": 2,
        "importPath": "tests.test_actions_generation.test_actions_generation_pipeline",
        "description": "tests.test_actions_generation.test_actions_generation_pipeline",
        "peekOfCode": "def load_tasks_from_json() -> Optional[List[Task]]:\n    \"\"\"\n    Loads tasks from a project-specific JSON file if available and valid.\n    \"\"\"\n    try:\n        with TASKS_CACHE_DIR.open() as f:\n            cache_data = json.load(f)\n        tasks = [Task.deserialize(task_data) for task_data in cache_data.get(\"tasks_with_tests\", [])]\n        print(f\"Loaded {len(tasks)} tasks...\")\n        return tasks[0:NUMBER_OF_TASKS]",
        "detail": "tests.test_actions_generation.test_actions_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TASKS_CACHE_DIR",
        "kind": 5,
        "importPath": "tests.test_actions_generation.test_actions_generation_pipeline",
        "description": "tests.test_actions_generation.test_actions_generation_pipeline",
        "peekOfCode": "TASKS_CACHE_DIR = PROJECT_BASE_DIR.parent / \"tests/jobs_demo_website_tasks.json\"\nUSE_CACHED_TASKS = True\nNUMBER_OF_TASKS = 1\ndef load_tasks_from_json() -> Optional[List[Task]]:\n    \"\"\"\n    Loads tasks from a project-specific JSON file if available and valid.\n    \"\"\"\n    try:\n        with TASKS_CACHE_DIR.open() as f:\n            cache_data = json.load(f)",
        "detail": "tests.test_actions_generation.test_actions_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "USE_CACHED_TASKS",
        "kind": 5,
        "importPath": "tests.test_actions_generation.test_actions_generation_pipeline",
        "description": "tests.test_actions_generation.test_actions_generation_pipeline",
        "peekOfCode": "USE_CACHED_TASKS = True\nNUMBER_OF_TASKS = 1\ndef load_tasks_from_json() -> Optional[List[Task]]:\n    \"\"\"\n    Loads tasks from a project-specific JSON file if available and valid.\n    \"\"\"\n    try:\n        with TASKS_CACHE_DIR.open() as f:\n            cache_data = json.load(f)\n        tasks = [Task.deserialize(task_data) for task_data in cache_data.get(\"tasks_with_tests\", [])]",
        "detail": "tests.test_actions_generation.test_actions_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "NUMBER_OF_TASKS",
        "kind": 5,
        "importPath": "tests.test_actions_generation.test_actions_generation_pipeline",
        "description": "tests.test_actions_generation.test_actions_generation_pipeline",
        "peekOfCode": "NUMBER_OF_TASKS = 1\ndef load_tasks_from_json() -> Optional[List[Task]]:\n    \"\"\"\n    Loads tasks from a project-specific JSON file if available and valid.\n    \"\"\"\n    try:\n        with TASKS_CACHE_DIR.open() as f:\n            cache_data = json.load(f)\n        tasks = [Task.deserialize(task_data) for task_data in cache_data.get(\"tasks_with_tests\", [])]\n        print(f\"Loaded {len(tasks)} tasks...\")",
        "detail": "tests.test_actions_generation.test_actions_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TestConcurrentTaskExecution",
        "kind": 6,
        "importPath": "tests.test_actions_generation.test_concurrent_actions_generation",
        "description": "tests.test_actions_generation.test_concurrent_actions_generation",
        "peekOfCode": "class TestConcurrentTaskExecution(unittest.TestCase):\n    \"\"\"Test concurrent execution of /solve_task endpoint.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Set up shared task data for all tests.\"\"\"\n        cls.url = \"http://127.0.0.1:9000/solve_task\"\n        # Task 1 Data\n        task1_data = {\n            \"prompt\": \"Click on the 'Login' link in the header, fill credentials, and login.\",\n            \"url\": \"http://localhost:8000/\",",
        "detail": "tests.test_actions_generation.test_concurrent_actions_generation",
        "documentation": {}
    },
    {
        "label": "TestActionGenerationAndEvaluation",
        "kind": 6,
        "importPath": "tests.test_actions_generation.test_generate_and_execute_actions",
        "description": "tests.test_actions_generation.test_generate_and_execute_actions",
        "peekOfCode": "class TestActionGenerationAndEvaluation(unittest.TestCase):\n    \"\"\"\n    Unit tests for action generation and evaluation.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Set up shared resources for the test class.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()",
        "detail": "tests.test_actions_generation.test_generate_and_execute_actions",
        "documentation": {}
    },
    {
        "label": "TestWebAnalysisPipelineWithCache",
        "kind": 6,
        "importPath": "tests.web_analysis.web_analyzer.test_web_analysis_with_cache",
        "description": "tests.web_analysis.web_analyzer.test_web_analysis_with_cache",
        "peekOfCode": "class TestWebAnalysisPipelineWithCache(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Set up resources for all tests.\"\"\"\n        cls.app_boostrap = AppBootstrap()\n        cls.analysis_repository = cls.app_boostrap.container.analysis_repository()\n        cls.llm_service = cls.app_boostrap.container.llm_service()\n        cls.enable_crawl = False\n        cls.data = {\n            \"domain\": \"localhost:8000\",",
        "detail": "tests.web_analysis.web_analyzer.test_web_analysis_with_cache",
        "documentation": {}
    },
    {
        "label": "TestWebAnalysisPipelineWithNoCrawling",
        "kind": 6,
        "importPath": "tests.web_analysis.web_analyzer.test_web_analyzer_without_crawl",
        "description": "tests.web_analysis.web_analyzer.test_web_analyzer_without_crawl",
        "peekOfCode": "class TestWebAnalysisPipelineWithNoCrawling(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.app_boostrap = AppBootstrap()\n        cls.analysis_repository = cls.app_boostrap.container.analysis_repository()\n        cls.llm_service = cls.app_boostrap.container.llm_service()\n        cls.url = \"http://localhost:8000/\"\n        cls.enable_crawl = False\n        cls.get_analysis_from_cache = False\n        cls.save_results_in_db = True",
        "detail": "tests.web_analysis.web_analyzer.test_web_analyzer_without_crawl",
        "documentation": {}
    },
    {
        "label": "TestWebAnalysisPipeline",
        "kind": 6,
        "importPath": "tests.web_analysis.web_analyzer.test_web_complete_analyzer",
        "description": "tests.web_analysis.web_analyzer.test_web_complete_analyzer",
        "peekOfCode": "class TestWebAnalysisPipeline(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.app_boostrap = AppBootstrap()\n        cls.analysis_repository = cls.app_boostrap.container.analysis_repository()\n        cls.llm_service = cls.app_boostrap.container.llm_service()\n        cls.start_url = \"http://localhost:8000/\"\n    def test_pipeline(self):\n        \"\"\"\n        Test the pipeline with a real website to verify the complete flow.",
        "detail": "tests.web_analysis.web_analyzer.test_web_complete_analyzer",
        "documentation": {}
    },
    {
        "label": "crawler_config",
        "kind": 5,
        "importPath": "tests.web_analysis.web_crawler.test_web_crawler",
        "description": "tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "crawler_config = WebCrawlerConfig(start_url=\"https://ajedrezenmadrid.com\", max_depth=2)\nweb_crawler = WebCrawler(crawler_config)\ncrawled_urls = web_crawler.crawl_urls()\nprint(\"Crawled URLs:\")\nfor url in crawled_urls:\n    print(url)\nasync def run_async_playwright():\n    all_links = await web_crawler.get_links(\"https://ajedrezenmadrid.com\")\n    print(\"Links obtained using async Playwright:\")\n    for link in all_links:",
        "detail": "tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "web_crawler",
        "kind": 5,
        "importPath": "tests.web_analysis.web_crawler.test_web_crawler",
        "description": "tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "web_crawler = WebCrawler(crawler_config)\ncrawled_urls = web_crawler.crawl_urls()\nprint(\"Crawled URLs:\")\nfor url in crawled_urls:\n    print(url)\nasync def run_async_playwright():\n    all_links = await web_crawler.get_links(\"https://ajedrezenmadrid.com\")\n    print(\"Links obtained using async Playwright:\")\n    for link in all_links:\n        print(link)",
        "detail": "tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "crawled_urls",
        "kind": 5,
        "importPath": "tests.web_analysis.web_crawler.test_web_crawler",
        "description": "tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "crawled_urls = web_crawler.crawl_urls()\nprint(\"Crawled URLs:\")\nfor url in crawled_urls:\n    print(url)\nasync def run_async_playwright():\n    all_links = await web_crawler.get_links(\"https://ajedrezenmadrid.com\")\n    print(\"Links obtained using async Playwright:\")\n    for link in all_links:\n        print(link)\nif __name__ == \"__main__\":",
        "detail": "tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "WebVoyagerConfig",
        "kind": 6,
        "importPath": "tests.web_voyager.test_real_web",
        "description": "tests.web_voyager.test_real_web",
        "peekOfCode": "class WebVoyagerConfig:\n    \"\"\"Configuration for the benchmark test.\"\"\"\n    use_cached_tasks: bool = False\n    use_cached_solutions: bool = False\n    m: int = 1  # Number of copies of each solution to evaluate\n    prompts_per_url: int = 3\n    num_of_urls: int = 2\n    # Paths\n    base_dir: Path = PROJECT_BASE_DIR.parent\n    data_dir: Path = base_dir / \"data\"",
        "detail": "tests.web_voyager.test_real_web",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "tests.web_voyager.test_real_web",
        "description": "tests.web_voyager.test_real_web",
        "peekOfCode": "config = WebVoyagerConfig()\nsolution_cache = ConsolidatedSolutionCache(str(config.solutions_cache_dir))\n# Define agents\nAGENTS: List[BaseAgent] = [\n    RandomClickerWebAgent(name=\"Random-clicker\"),\n    # ApifiedWebAgent(name=\"Browser-Use\", host=\"localhost\", port=9000, timeout=120),\n    # ApifiedWebAgent(name=\"Autoppia-Agent\", host=\"localhost\", port=9002, timeout=120),\n]\n# Setup logging\nlogging.basicConfig(",
        "detail": "tests.web_voyager.test_real_web",
        "documentation": {}
    },
    {
        "label": "solution_cache",
        "kind": 5,
        "importPath": "tests.web_voyager.test_real_web",
        "description": "tests.web_voyager.test_real_web",
        "peekOfCode": "solution_cache = ConsolidatedSolutionCache(str(config.solutions_cache_dir))\n# Define agents\nAGENTS: List[BaseAgent] = [\n    RandomClickerWebAgent(name=\"Random-clicker\"),\n    # ApifiedWebAgent(name=\"Browser-Use\", host=\"localhost\", port=9000, timeout=120),\n    # ApifiedWebAgent(name=\"Autoppia-Agent\", host=\"localhost\", port=9002, timeout=120),\n]\n# Setup logging\nlogging.basicConfig(\n    level=logging.INFO,",
        "detail": "tests.web_voyager.test_real_web",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tests.web_voyager.test_real_web",
        "description": "tests.web_voyager.test_real_web",
        "peekOfCode": "logger = logging.getLogger(\"benchmark\")\nvisualizer = SubnetVisualizer()\n@visualize_task(visualizer)\nasync def generate_tasks(demo_project: WebProject, tasks_data: Optional[TaskData] = None) -> List[Task]:\n    \"\"\"Generate tasks with caching support.\"\"\"\n    task = Task(url=tasks_data.web, prompt=tasks_data.ques, is_web_real=True)\n    return await LocalTestGenerationPipeline(demo_project).add_tests_to_tasks([task])\n@visualize_evaluation(visualizer)\nasync def evaluate_task_solution(web_project: WebProject, task: Task, task_solution: TaskSolution) -> EvaluationResult:\n    \"\"\"Evaluate a task solution.\"\"\"",
        "detail": "tests.web_voyager.test_real_web",
        "documentation": {}
    },
    {
        "label": "visualizer",
        "kind": 5,
        "importPath": "tests.web_voyager.test_real_web",
        "description": "tests.web_voyager.test_real_web",
        "peekOfCode": "visualizer = SubnetVisualizer()\n@visualize_task(visualizer)\nasync def generate_tasks(demo_project: WebProject, tasks_data: Optional[TaskData] = None) -> List[Task]:\n    \"\"\"Generate tasks with caching support.\"\"\"\n    task = Task(url=tasks_data.web, prompt=tasks_data.ques, is_web_real=True)\n    return await LocalTestGenerationPipeline(demo_project).add_tests_to_tasks([task])\n@visualize_evaluation(visualizer)\nasync def evaluate_task_solution(web_project: WebProject, task: Task, task_solution: TaskSolution) -> EvaluationResult:\n    \"\"\"Evaluate a task solution.\"\"\"\n    evaluator = ConcurrentEvaluator(",
        "detail": "tests.web_voyager.test_real_web",
        "documentation": {}
    },
    {
        "label": "TestDIContainer",
        "kind": 6,
        "importPath": "tests.test_di_container",
        "description": "tests.test_di_container",
        "peekOfCode": "class TestDIContainer(containers.DeclarativeContainer):\n    \"\"\"Dependency Injection Container.\"\"\"\n    # Configuration\n    config = providers.Configuration()\n    wiring_config = containers.WiringConfiguration(packages=[\"tests\"])\n    web_agent = providers.Singleton(lambda: TestDIContainer._assign_agent())\n    @staticmethod\n    def _assign_agent() -> ApifiedWebAgent:\n        return ApifiedWebAgent(name=AGENT_NAME, host=AGENT_HOST, port=AGENT_PORT)",
        "detail": "tests.test_di_container",
        "documentation": {}
    }
]