[project]
name = "autoppia_iwa"
version = "0.0.1"
description = "Autoppia IWA Sythetic Benchmark for Web Agents Evaluation"
requires-python = ">=3.11"
dynamic = ["dependencies"]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[tool.setuptools.packages.find]
include = ["*"]
exclude = ["tests*", "docs*", "data*"]  # Exclude non-package directories

# Black configuration
[tool.black]
line-length = 200
target-version = ["py311"]
skip-string-normalization = true

# Ruff configuration
[tool.ruff]
line-length = 200
target-version = "py311"
exclude = ["modules/*"]

fix = true  # Enables auto-fixing
unsafe-fixes = true  # Allows unsafe fixes

[tool.ruff.lint]
select = ["E", "F", "W", "I", "UP", "B", "SIM", "RUF"]
ignore = ["E402", "E501", "F821"]

[tool.ruff.lint.isort]
known-first-party = ["autoppia_iwa"]
known-third-party = [
    "PIL", "aiohttp", "bs4", "dependency_injector", "distutils", "dotenv", "faker", "flask", "flask_cors",
    "httpx", "json_repair", "loguru", "matplotlib", "networkx", "openai", "playwright", "pydantic",
    "pymongo", "requests", "rich", "tiktoken", "torch", "transformers", "typing_extensions", "xmldiff"
]
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

# Pytest configuration
[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "--import-mode=importlib"
testpaths = ["tests"]

# Optional: A section for development dependencies
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "ruff>=0.3.0"
]
