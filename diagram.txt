 ┌─────────────────────────┐
 │ Phase 1: Web Analysis   │
 └─────────────────────────┘
     1.1) Crawl or retrieve website HTML and page structure.
     1.2) Summarize pages with LLM (domain analysis).
     1.3) Store resulting DomainAnalysis object (contains pages, summaries, features).

Inputs:
  - Start URL, crawl depth, page HTML
Process:
  - Web crawler (optional)
  - HTML/DOM extraction
  - LLM for summarizing each page
Outputs:
  - DomainAnalysis (pages, features, summary data)
  

 ┌──────────────────────────────────────────┐
 │ Phase 2: Task Generation (TaskPromptGenerator) │
 └──────────────────────────────────────────┘
     2.1) Discover Domain-Wide Use Cases
         - LLM: "What are typical multi-page user flows?"
         - Produces a list of strings describing overall scenarios.
     2.2) Generate Global Tasks
         - LLM: "Create multi-step tasks from these use cases."
         - Outputs tasks describing multi-page usage flows.
     2.3) Generate Local Tasks (per page)
         - For each page’s HTML summary, LLM: "Generate usage-based tasks for this specific page."
         - Outputs single-page tasks.
     2.4) Classify & Filter Tasks
         - LLM: "Classify tasks by type (multi-step, data entry, etc.)."
         - Possibly do a final LLM filter to remove dev-based tasks or those missing success criteria.
     2.5) Build Final Task Objects
         - Each Task object includes: 
             prompt, 
             type (global/local), 
             success_criteria, 
             reference to DomainAnalysis.

Inputs:
  - DomainAnalysis (from Phase 1)
Process:
  - Multiple LLM prompts for use-case discovery, task creation, classification
Outputs:
  - List[Task] (with prompt, success criteria, type, etc.)

   
 ┌─────────────────────────────────────────────────┐
 │ Phase 3: Task Validation (TaskContextualValidator) │
 └─────────────────────────────────────────────────┘
     3.1) Heuristic Checks
         - Basic rules (e.g., required features exist in domain analysis).
     3.2) LLM-Based Validation (optional)
         - LLM: "Is this task feasible given the domain features?"
         - Filter out invalid tasks.

Inputs:
  - Generated tasks from Phase 2
  - DomainAnalysis features
Process:
  - Heuristic + optional LLM checks
Outputs:
  - Validated tasks (a subset or the entire set from Phase 2)


 ┌──────────────────────────────────────────────────┐
 │ Phase 4: Test Generation (TaskTestGenerator)    │
 └──────────────────────────────────────────────────┘
     4.1) For each valid Task, propose candidate tests:
         - LLM: "Generate JSON tests: CheckHTMLTest, CheckPageViewTest, etc."
     4.2) Parse & Validate Candidate Tests
         - We ensure the JSON is correct, meets schema.
     4.3) Classify & Rank Tests
         - Possibly remove irrelevant tests or pick top tests.
     4.4) Select Final Tests
         - Attach them to the Task object.

Inputs:
  - Validated tasks (Phase 3)
  - Page HTML & domain analysis for context
Process:
  - LLM calls to produce candidate tests
  - Filter/selection logic
Outputs:
  - Each Task now has a .tests list (check events, check HTML, etc.)


 ┌────────────────────────────────────────────┐
 │ Phase 5: Final Review & (Optional) Judging│
 └────────────────────────────────────────────┘
     5.1) Display or log tasks + tests.
     5.2) (Optional) LLM-based “Judgment” to refine or remove tasks/tests.
     5.3) Store final tasks in DB or run them in an automation environment.

Inputs:
  - Fully created tasks (with tests)
Process:
  - Manual review or LLM-based final refinement
Outputs:
  - Final list of tasks & tests for the site’s usage scenario
